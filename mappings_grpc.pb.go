// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protolca

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FlowMapServiceClient is the client API for FlowMapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlowMapServiceClient interface {
	// Delete the flow map with the given name.
	Delete(ctx context.Context, in *FlowMapInfo, opts ...grpc.CallOption) (*empty.Empty, error)
	// Get the flow map with the given name form the database.
	Get(ctx context.Context, in *FlowMapInfo, opts ...grpc.CallOption) (*FlowMap, error)
	// Get the information (basically just the names) of all flow maps that are
	// available in the database.
	GetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (FlowMapService_GetAllClient, error)
	// Inserts the given flow map into the database. It overwrites an existing
	// flow map if there is a flow map with the same name already available in the
	// database.
	Put(ctx context.Context, in *FlowMap, opts ...grpc.CallOption) (*empty.Empty, error)
}

type flowMapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlowMapServiceClient(cc grpc.ClientConnInterface) FlowMapServiceClient {
	return &flowMapServiceClient{cc}
}

func (c *flowMapServiceClient) Delete(ctx context.Context, in *FlowMapInfo, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protolca.services.FlowMapService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowMapServiceClient) Get(ctx context.Context, in *FlowMapInfo, opts ...grpc.CallOption) (*FlowMap, error) {
	out := new(FlowMap)
	err := c.cc.Invoke(ctx, "/protolca.services.FlowMapService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowMapServiceClient) GetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (FlowMapService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &FlowMapService_ServiceDesc.Streams[0], "/protolca.services.FlowMapService/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &flowMapServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FlowMapService_GetAllClient interface {
	Recv() (*FlowMapInfo, error)
	grpc.ClientStream
}

type flowMapServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *flowMapServiceGetAllClient) Recv() (*FlowMapInfo, error) {
	m := new(FlowMapInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *flowMapServiceClient) Put(ctx context.Context, in *FlowMap, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protolca.services.FlowMapService/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlowMapServiceServer is the server API for FlowMapService service.
// All implementations must embed UnimplementedFlowMapServiceServer
// for forward compatibility
type FlowMapServiceServer interface {
	// Delete the flow map with the given name.
	Delete(context.Context, *FlowMapInfo) (*empty.Empty, error)
	// Get the flow map with the given name form the database.
	Get(context.Context, *FlowMapInfo) (*FlowMap, error)
	// Get the information (basically just the names) of all flow maps that are
	// available in the database.
	GetAll(*empty.Empty, FlowMapService_GetAllServer) error
	// Inserts the given flow map into the database. It overwrites an existing
	// flow map if there is a flow map with the same name already available in the
	// database.
	Put(context.Context, *FlowMap) (*empty.Empty, error)
	mustEmbedUnimplementedFlowMapServiceServer()
}

// UnimplementedFlowMapServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFlowMapServiceServer struct {
}

func (UnimplementedFlowMapServiceServer) Delete(context.Context, *FlowMapInfo) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFlowMapServiceServer) Get(context.Context, *FlowMapInfo) (*FlowMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedFlowMapServiceServer) GetAll(*empty.Empty, FlowMapService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedFlowMapServiceServer) Put(context.Context, *FlowMap) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedFlowMapServiceServer) mustEmbedUnimplementedFlowMapServiceServer() {}

// UnsafeFlowMapServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlowMapServiceServer will
// result in compilation errors.
type UnsafeFlowMapServiceServer interface {
	mustEmbedUnimplementedFlowMapServiceServer()
}

func RegisterFlowMapServiceServer(s grpc.ServiceRegistrar, srv FlowMapServiceServer) {
	s.RegisterService(&FlowMapService_ServiceDesc, srv)
}

func _FlowMapService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowMapInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowMapServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protolca.services.FlowMapService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowMapServiceServer).Delete(ctx, req.(*FlowMapInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowMapService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowMapInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowMapServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protolca.services.FlowMapService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowMapServiceServer).Get(ctx, req.(*FlowMapInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowMapService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FlowMapServiceServer).GetAll(m, &flowMapServiceGetAllServer{stream})
}

type FlowMapService_GetAllServer interface {
	Send(*FlowMapInfo) error
	grpc.ServerStream
}

type flowMapServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *flowMapServiceGetAllServer) Send(m *FlowMapInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _FlowMapService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowMap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowMapServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protolca.services.FlowMapService/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowMapServiceServer).Put(ctx, req.(*FlowMap))
	}
	return interceptor(ctx, in, info, handler)
}

// FlowMapService_ServiceDesc is the grpc.ServiceDesc for FlowMapService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlowMapService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protolca.services.FlowMapService",
	HandlerType: (*FlowMapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _FlowMapService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _FlowMapService_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _FlowMapService_Put_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _FlowMapService_GetAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mappings.proto",
}

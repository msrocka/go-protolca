// Generated from olca-schema (https://github.com/GreenDelta/olca-schema).
// DO NOT EDIT!

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: olca.proto

package protolca

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// An enumeration type for allocation methods. This type is used to define the
// type of an [AllocationFactor], the default allocation method of a
// multi-functional [Process], or the allocation method in a
// [CalculationSetup].
type AllocationType int32

const (
	// This default option was added automatically
	// and means that no values was set.
	AllocationType_UNDEFINED_ALLOCATION_TYPE AllocationType = 0
	AllocationType_PHYSICAL_ALLOCATION       AllocationType = 1
	AllocationType_ECONOMIC_ALLOCATION       AllocationType = 2
	AllocationType_CAUSAL_ALLOCATION         AllocationType = 3
	AllocationType_USE_DEFAULT_ALLOCATION    AllocationType = 4
	AllocationType_NO_ALLOCATION             AllocationType = 5
)

// Enum value maps for AllocationType.
var (
	AllocationType_name = map[int32]string{
		0: "UNDEFINED_ALLOCATION_TYPE",
		1: "PHYSICAL_ALLOCATION",
		2: "ECONOMIC_ALLOCATION",
		3: "CAUSAL_ALLOCATION",
		4: "USE_DEFAULT_ALLOCATION",
		5: "NO_ALLOCATION",
	}
	AllocationType_value = map[string]int32{
		"UNDEFINED_ALLOCATION_TYPE": 0,
		"PHYSICAL_ALLOCATION":       1,
		"ECONOMIC_ALLOCATION":       2,
		"CAUSAL_ALLOCATION":         3,
		"USE_DEFAULT_ALLOCATION":    4,
		"NO_ALLOCATION":             5,
	}
)

func (x AllocationType) Enum() *AllocationType {
	p := new(AllocationType)
	*p = x
	return p
}

func (x AllocationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllocationType) Descriptor() protoreflect.EnumDescriptor {
	return file_olca_proto_enumTypes[0].Descriptor()
}

func (AllocationType) Type() protoreflect.EnumType {
	return &file_olca_proto_enumTypes[0]
}

func (x AllocationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllocationType.Descriptor instead.
func (AllocationType) EnumDescriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{0}
}

// An enumeration of the different calculation methods supported by openLCA.
type CalculationType int32

const (
	// This default option was added automatically
	// and means that no values was set.
	CalculationType_UNDEFINED_CALCULATION_TYPE CalculationType = 0
	// Calculates the total results for elementary flows, LCIA indicators, costs,
	// etc. of a product system.
	CalculationType_SIMPLE_CALCULATION CalculationType = 1
	// Includes the total result vectors of a simple calculation but calculates
	// also the direct contributions of each process (or better process product
	// in case of multi-output processes) to these total results.
	CalculationType_CONTRIBUTION_ANALYSIS CalculationType = 2
	// Extends the contribution analysis by providing also the upstream results
	// of each process (process product) in the product system. The upstream
	// result contains the direct contributions of the respective process but
	// also the result of the supply chain up to this process scaled to the
	// demand of the process in the product system.
	CalculationType_UPSTREAM_ANALYSIS CalculationType = 3
	// A Monte Carlo simulation generates for each run, of a given number of a
	// given number of iterations, random values according to the uncertainty
	// distributions of process inputs/outputs, parameters, characterization
	// factors, etc. of a product system and then performs a simple calculation
	// for that specific run.
	CalculationType_MONTE_CARLO_SIMULATION CalculationType = 4
)

// Enum value maps for CalculationType.
var (
	CalculationType_name = map[int32]string{
		0: "UNDEFINED_CALCULATION_TYPE",
		1: "SIMPLE_CALCULATION",
		2: "CONTRIBUTION_ANALYSIS",
		3: "UPSTREAM_ANALYSIS",
		4: "MONTE_CARLO_SIMULATION",
	}
	CalculationType_value = map[string]int32{
		"UNDEFINED_CALCULATION_TYPE": 0,
		"SIMPLE_CALCULATION":         1,
		"CONTRIBUTION_ANALYSIS":      2,
		"UPSTREAM_ANALYSIS":          3,
		"MONTE_CARLO_SIMULATION":     4,
	}
)

func (x CalculationType) Enum() *CalculationType {
	p := new(CalculationType)
	*p = x
	return p
}

func (x CalculationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CalculationType) Descriptor() protoreflect.EnumDescriptor {
	return file_olca_proto_enumTypes[1].Descriptor()
}

func (CalculationType) Type() protoreflect.EnumType {
	return &file_olca_proto_enumTypes[1]
}

func (x CalculationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CalculationType.Descriptor instead.
func (CalculationType) EnumDescriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{1}
}

// An enumeration of flow property types.
type FlowPropertyType int32

const (
	// This default option was added automatically
	// and means that no values was set.
	FlowPropertyType_UNDEFINED_FLOW_PROPERTY_TYPE FlowPropertyType = 0
	FlowPropertyType_ECONOMIC_QUANTITY            FlowPropertyType = 1
	FlowPropertyType_PHYSICAL_QUANTITY            FlowPropertyType = 2
)

// Enum value maps for FlowPropertyType.
var (
	FlowPropertyType_name = map[int32]string{
		0: "UNDEFINED_FLOW_PROPERTY_TYPE",
		1: "ECONOMIC_QUANTITY",
		2: "PHYSICAL_QUANTITY",
	}
	FlowPropertyType_value = map[string]int32{
		"UNDEFINED_FLOW_PROPERTY_TYPE": 0,
		"ECONOMIC_QUANTITY":            1,
		"PHYSICAL_QUANTITY":            2,
	}
)

func (x FlowPropertyType) Enum() *FlowPropertyType {
	p := new(FlowPropertyType)
	*p = x
	return p
}

func (x FlowPropertyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowPropertyType) Descriptor() protoreflect.EnumDescriptor {
	return file_olca_proto_enumTypes[2].Descriptor()
}

func (FlowPropertyType) Type() protoreflect.EnumType {
	return &file_olca_proto_enumTypes[2]
}

func (x FlowPropertyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowPropertyType.Descriptor instead.
func (FlowPropertyType) EnumDescriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{2}
}

// The basic flow types.
type FlowType int32

const (
	// This default option was added automatically
	// and means that no values was set.
	FlowType_UNDEFINED_FLOW_TYPE FlowType = 0
	FlowType_ELEMENTARY_FLOW     FlowType = 1
	FlowType_PRODUCT_FLOW        FlowType = 2
	FlowType_WASTE_FLOW          FlowType = 3
)

// Enum value maps for FlowType.
var (
	FlowType_name = map[int32]string{
		0: "UNDEFINED_FLOW_TYPE",
		1: "ELEMENTARY_FLOW",
		2: "PRODUCT_FLOW",
		3: "WASTE_FLOW",
	}
	FlowType_value = map[string]int32{
		"UNDEFINED_FLOW_TYPE": 0,
		"ELEMENTARY_FLOW":     1,
		"PRODUCT_FLOW":        2,
		"WASTE_FLOW":          3,
	}
)

func (x FlowType) Enum() *FlowType {
	p := new(FlowType)
	*p = x
	return p
}

func (x FlowType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowType) Descriptor() protoreflect.EnumDescriptor {
	return file_olca_proto_enumTypes[3].Descriptor()
}

func (FlowType) Type() protoreflect.EnumType {
	return &file_olca_proto_enumTypes[3]
}

func (x FlowType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowType.Descriptor instead.
func (FlowType) EnumDescriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{3}
}

// An enumeration of the root entity types.
type ModelType int32

const (
	// This default option was added automatically
	// and means that no values was set.
	ModelType_UNDEFINED_MODEL_TYPE ModelType = 0
	ModelType_ACTOR                ModelType = 1
	ModelType_CATEGORY             ModelType = 2
	ModelType_CURRENCY             ModelType = 3
	ModelType_DQ_SYSTEM            ModelType = 4
	ModelType_FLOW                 ModelType = 5
	ModelType_FLOW_PROPERTY        ModelType = 6
	ModelType_IMPACT_CATEGORY      ModelType = 7
	ModelType_IMPACT_METHOD        ModelType = 8
	ModelType_LOCATION             ModelType = 9
	ModelType_NW_SET               ModelType = 10
	ModelType_PARAMETER            ModelType = 11
	ModelType_PROCESS              ModelType = 12
	ModelType_PRODUCT_SYSTEM       ModelType = 13
	ModelType_PROJECT              ModelType = 14
	ModelType_SOCIAL_INDICATOR     ModelType = 15
	ModelType_SOURCE               ModelType = 16
	ModelType_UNIT                 ModelType = 17
	ModelType_UNIT_GROUP           ModelType = 18
)

// Enum value maps for ModelType.
var (
	ModelType_name = map[int32]string{
		0:  "UNDEFINED_MODEL_TYPE",
		1:  "ACTOR",
		2:  "CATEGORY",
		3:  "CURRENCY",
		4:  "DQ_SYSTEM",
		5:  "FLOW",
		6:  "FLOW_PROPERTY",
		7:  "IMPACT_CATEGORY",
		8:  "IMPACT_METHOD",
		9:  "LOCATION",
		10: "NW_SET",
		11: "PARAMETER",
		12: "PROCESS",
		13: "PRODUCT_SYSTEM",
		14: "PROJECT",
		15: "SOCIAL_INDICATOR",
		16: "SOURCE",
		17: "UNIT",
		18: "UNIT_GROUP",
	}
	ModelType_value = map[string]int32{
		"UNDEFINED_MODEL_TYPE": 0,
		"ACTOR":                1,
		"CATEGORY":             2,
		"CURRENCY":             3,
		"DQ_SYSTEM":            4,
		"FLOW":                 5,
		"FLOW_PROPERTY":        6,
		"IMPACT_CATEGORY":      7,
		"IMPACT_METHOD":        8,
		"LOCATION":             9,
		"NW_SET":               10,
		"PARAMETER":            11,
		"PROCESS":              12,
		"PRODUCT_SYSTEM":       13,
		"PROJECT":              14,
		"SOCIAL_INDICATOR":     15,
		"SOURCE":               16,
		"UNIT":                 17,
		"UNIT_GROUP":           18,
	}
)

func (x ModelType) Enum() *ModelType {
	p := new(ModelType)
	*p = x
	return p
}

func (x ModelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelType) Descriptor() protoreflect.EnumDescriptor {
	return file_olca_proto_enumTypes[4].Descriptor()
}

func (ModelType) Type() protoreflect.EnumType {
	return &file_olca_proto_enumTypes[4]
}

func (x ModelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModelType.Descriptor instead.
func (ModelType) EnumDescriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{4}
}

// The possible scopes of parameters. Parameters can be defined globally, in
// processes, or impact categories. They can be redefined in calculation setups
// on the project and product system level, but the initial definition is
// always only global, in a process, or an LCIA category.
type ParameterScope int32

const (
	// This default option was added automatically
	// and means that no values was set.
	ParameterScope_UNDEFINED_PARAMETER_SCOPE ParameterScope = 0
	// Indicates that the evaluation scope of a parameter is the process where it
	// is defined.
	ParameterScope_PROCESS_SCOPE ParameterScope = 1
	// Indicates that the evaluation scope of a parameter is the impact category
	// where it is defined.
	ParameterScope_IMPACT_SCOPE ParameterScope = 2
	// Indicates that the evaluation scope of a parameter is the global scope.
	ParameterScope_GLOBAL_SCOPE ParameterScope = 3
)

// Enum value maps for ParameterScope.
var (
	ParameterScope_name = map[int32]string{
		0: "UNDEFINED_PARAMETER_SCOPE",
		1: "PROCESS_SCOPE",
		2: "IMPACT_SCOPE",
		3: "GLOBAL_SCOPE",
	}
	ParameterScope_value = map[string]int32{
		"UNDEFINED_PARAMETER_SCOPE": 0,
		"PROCESS_SCOPE":             1,
		"IMPACT_SCOPE":              2,
		"GLOBAL_SCOPE":              3,
	}
)

func (x ParameterScope) Enum() *ParameterScope {
	p := new(ParameterScope)
	*p = x
	return p
}

func (x ParameterScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParameterScope) Descriptor() protoreflect.EnumDescriptor {
	return file_olca_proto_enumTypes[5].Descriptor()
}

func (ParameterScope) Type() protoreflect.EnumType {
	return &file_olca_proto_enumTypes[5]
}

func (x ParameterScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParameterScope.Descriptor instead.
func (ParameterScope) EnumDescriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{5}
}

type ProcessType int32

const (
	// This default option was added automatically
	// and means that no values was set.
	ProcessType_UNDEFINED_PROCESS_TYPE ProcessType = 0
	ProcessType_LCI_RESULT             ProcessType = 1
	ProcessType_UNIT_PROCESS           ProcessType = 2
)

// Enum value maps for ProcessType.
var (
	ProcessType_name = map[int32]string{
		0: "UNDEFINED_PROCESS_TYPE",
		1: "LCI_RESULT",
		2: "UNIT_PROCESS",
	}
	ProcessType_value = map[string]int32{
		"UNDEFINED_PROCESS_TYPE": 0,
		"LCI_RESULT":             1,
		"UNIT_PROCESS":           2,
	}
)

func (x ProcessType) Enum() *ProcessType {
	p := new(ProcessType)
	*p = x
	return p
}

func (x ProcessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessType) Descriptor() protoreflect.EnumDescriptor {
	return file_olca_proto_enumTypes[6].Descriptor()
}

func (ProcessType) Type() protoreflect.EnumType {
	return &file_olca_proto_enumTypes[6]
}

func (x ProcessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessType.Descriptor instead.
func (ProcessType) EnumDescriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{6}
}

type RiskLevel int32

const (
	// This default option was added automatically
	// and means that no values was set.
	RiskLevel_UNDEFINED_RISK_LEVEL RiskLevel = 0
	RiskLevel_NO_OPPORTUNITY       RiskLevel = 1
	RiskLevel_HIGH_OPPORTUNITY     RiskLevel = 2
	RiskLevel_MEDIUM_OPPORTUNITY   RiskLevel = 3
	RiskLevel_LOW_OPPORTUNITY      RiskLevel = 4
	RiskLevel_NO_RISK              RiskLevel = 5
	RiskLevel_VERY_LOW_RISK        RiskLevel = 6
	RiskLevel_LOW_RISK             RiskLevel = 7
	RiskLevel_MEDIUM_RISK          RiskLevel = 8
	RiskLevel_HIGH_RISK            RiskLevel = 9
	RiskLevel_VERY_HIGH_RISK       RiskLevel = 10
	RiskLevel_NO_DATA              RiskLevel = 11
	RiskLevel_NOT_APPLICABLE       RiskLevel = 12
)

// Enum value maps for RiskLevel.
var (
	RiskLevel_name = map[int32]string{
		0:  "UNDEFINED_RISK_LEVEL",
		1:  "NO_OPPORTUNITY",
		2:  "HIGH_OPPORTUNITY",
		3:  "MEDIUM_OPPORTUNITY",
		4:  "LOW_OPPORTUNITY",
		5:  "NO_RISK",
		6:  "VERY_LOW_RISK",
		7:  "LOW_RISK",
		8:  "MEDIUM_RISK",
		9:  "HIGH_RISK",
		10: "VERY_HIGH_RISK",
		11: "NO_DATA",
		12: "NOT_APPLICABLE",
	}
	RiskLevel_value = map[string]int32{
		"UNDEFINED_RISK_LEVEL": 0,
		"NO_OPPORTUNITY":       1,
		"HIGH_OPPORTUNITY":     2,
		"MEDIUM_OPPORTUNITY":   3,
		"LOW_OPPORTUNITY":      4,
		"NO_RISK":              5,
		"VERY_LOW_RISK":        6,
		"LOW_RISK":             7,
		"MEDIUM_RISK":          8,
		"HIGH_RISK":            9,
		"VERY_HIGH_RISK":       10,
		"NO_DATA":              11,
		"NOT_APPLICABLE":       12,
	}
)

func (x RiskLevel) Enum() *RiskLevel {
	p := new(RiskLevel)
	*p = x
	return p
}

func (x RiskLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RiskLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_olca_proto_enumTypes[7].Descriptor()
}

func (RiskLevel) Type() protoreflect.EnumType {
	return &file_olca_proto_enumTypes[7]
}

func (x RiskLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RiskLevel.Descriptor instead.
func (RiskLevel) EnumDescriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{7}
}

// Enumeration of uncertainty distribution types that can be used in exchanges,
// parameters, LCIA factors, etc.
type UncertaintyType int32

const (
	// This default option was added automatically
	// and means that no values was set.
	UncertaintyType_UNDEFINED_UNCERTAINTY_TYPE UncertaintyType = 0
	UncertaintyType_LOG_NORMAL_DISTRIBUTION    UncertaintyType = 1
	UncertaintyType_NORMAL_DISTRIBUTION        UncertaintyType = 2
	UncertaintyType_TRIANGLE_DISTRIBUTION      UncertaintyType = 3
	UncertaintyType_UNIFORM_DISTRIBUTION       UncertaintyType = 4
)

// Enum value maps for UncertaintyType.
var (
	UncertaintyType_name = map[int32]string{
		0: "UNDEFINED_UNCERTAINTY_TYPE",
		1: "LOG_NORMAL_DISTRIBUTION",
		2: "NORMAL_DISTRIBUTION",
		3: "TRIANGLE_DISTRIBUTION",
		4: "UNIFORM_DISTRIBUTION",
	}
	UncertaintyType_value = map[string]int32{
		"UNDEFINED_UNCERTAINTY_TYPE": 0,
		"LOG_NORMAL_DISTRIBUTION":    1,
		"NORMAL_DISTRIBUTION":        2,
		"TRIANGLE_DISTRIBUTION":      3,
		"UNIFORM_DISTRIBUTION":       4,
	}
)

func (x UncertaintyType) Enum() *UncertaintyType {
	p := new(UncertaintyType)
	*p = x
	return p
}

func (x UncertaintyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UncertaintyType) Descriptor() protoreflect.EnumDescriptor {
	return file_olca_proto_enumTypes[8].Descriptor()
}

func (UncertaintyType) Type() protoreflect.EnumType {
	return &file_olca_proto_enumTypes[8]
}

func (x UncertaintyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UncertaintyType.Descriptor instead.
func (UncertaintyType) EnumDescriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{8}
}

// An actor is a person or organisation.
type Actor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reference ID (typically an UUID) of the entity.
	Id string `protobuf:"bytes,1,opt,name=id,json=@id,proto3" json:"id,omitempty"`
	// The name of the entity.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the entity.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// A version number in MAJOR.MINOR.PATCH format where the MINOR and PATCH
	// fields are optional and the fields may have leading zeros (so 01.00.00 is
	// the same as 1.0.0 or 1).
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// The timestamp when the entity was changed the last time.
	LastChange string `protobuf:"bytes,5,opt,name=last_change,json=lastChange,proto3" json:"last_change,omitempty"`
	// The type name of the respective entity.
	EntityType EntityType `protobuf:"varint,6,opt,name=entity_type,json=@type,proto3,enum=protolca.commons.EntityType" json:"entity_type,omitempty"`
	// The category of the entity.
	Category *Ref `protobuf:"bytes,7,opt,name=category,proto3" json:"category,omitempty"`
	// A list of optional tags. A tag is just a string which should not contain
	// commas (and other special characters).
	Tags []string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	// If this entity is part of a library, this field contains the identifier of
	// that library. The identifier is typically just the combination of the
	// library name and version.
	Library   string `protobuf:"bytes,9,opt,name=library,proto3" json:"library,omitempty"`
	Address   string `protobuf:"bytes,10,opt,name=address,proto3" json:"address,omitempty"`
	City      string `protobuf:"bytes,11,opt,name=city,proto3" json:"city,omitempty"`
	Country   string `protobuf:"bytes,12,opt,name=country,proto3" json:"country,omitempty"`
	Email     string `protobuf:"bytes,13,opt,name=email,proto3" json:"email,omitempty"`
	Telefax   string `protobuf:"bytes,14,opt,name=telefax,proto3" json:"telefax,omitempty"`
	Telephone string `protobuf:"bytes,15,opt,name=telephone,proto3" json:"telephone,omitempty"`
	Website   string `protobuf:"bytes,16,opt,name=website,proto3" json:"website,omitempty"`
	ZipCode   string `protobuf:"bytes,17,opt,name=zip_code,json=zipCode,proto3" json:"zip_code,omitempty"`
}

func (x *Actor) Reset() {
	*x = Actor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Actor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Actor) ProtoMessage() {}

func (x *Actor) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Actor.ProtoReflect.Descriptor instead.
func (*Actor) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{0}
}

func (x *Actor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Actor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Actor) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Actor) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Actor) GetLastChange() string {
	if x != nil {
		return x.LastChange
	}
	return ""
}

func (x *Actor) GetEntityType() EntityType {
	if x != nil {
		return x.EntityType
	}
	return EntityType_Undefined
}

func (x *Actor) GetCategory() *Ref {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Actor) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Actor) GetLibrary() string {
	if x != nil {
		return x.Library
	}
	return ""
}

func (x *Actor) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Actor) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Actor) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Actor) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Actor) GetTelefax() string {
	if x != nil {
		return x.Telefax
	}
	return ""
}

func (x *Actor) GetTelephone() string {
	if x != nil {
		return x.Telephone
	}
	return ""
}

func (x *Actor) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *Actor) GetZipCode() string {
	if x != nil {
		return x.ZipCode
	}
	return ""
}

// A single allocation factor in a process.
type AllocationFactor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of allocation.
	AllocationType AllocationType `protobuf:"varint,1,opt,name=allocation_type,json=allocationType,proto3,enum=protolca.AllocationType" json:"allocation_type,omitempty"`
	// The output product (or waste input) to which this allocation factor is
	// related. The must be an exchange with this product output (or waste input)
	// in this process.
	Product *Ref `protobuf:"bytes,2,opt,name=product,proto3" json:"product,omitempty"`
	// The value of the allocation factor.
	Value float64 `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
	// An optional formula from which the value of the allocation factor is
	// calculated.
	Formula string `protobuf:"bytes,4,opt,name=formula,proto3" json:"formula,omitempty"`
	// A product input, waste output, or elementary flow exchange which is
	// allocated by this factor. This is only valid for causal allocation where
	// allocation factors can be assigned to single exchanges.
	Exchange *ExchangeRef `protobuf:"bytes,5,opt,name=exchange,proto3" json:"exchange,omitempty"`
}

func (x *AllocationFactor) Reset() {
	*x = AllocationFactor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocationFactor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocationFactor) ProtoMessage() {}

func (x *AllocationFactor) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocationFactor.ProtoReflect.Descriptor instead.
func (*AllocationFactor) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{1}
}

func (x *AllocationFactor) GetAllocationType() AllocationType {
	if x != nil {
		return x.AllocationType
	}
	return AllocationType_UNDEFINED_ALLOCATION_TYPE
}

func (x *AllocationFactor) GetProduct() *Ref {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *AllocationFactor) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *AllocationFactor) GetFormula() string {
	if x != nil {
		return x.Formula
	}
	return ""
}

func (x *AllocationFactor) GetExchange() *ExchangeRef {
	if x != nil {
		return x.Exchange
	}
	return nil
}

// A setup for a product system calculation.
type CalculationSetup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of calculation that should be performed.
	CalculationType CalculationType `protobuf:"varint,1,opt,name=calculation_type,json=calculationType,proto3,enum=protolca.CalculationType" json:"calculation_type,omitempty"`
	// The product system that should be calculated.
	ProductSystem *Ref `protobuf:"bytes,2,opt,name=product_system,json=productSystem,proto3" json:"product_system,omitempty"`
	// The process that should be calculated.
	Process *Ref `protobuf:"bytes,3,opt,name=process,proto3" json:"process,omitempty"`
	// The LCIA method for the calculation.
	ImpactMethod *Ref `protobuf:"bytes,4,opt,name=impact_method,json=impactMethod,proto3" json:"impact_method,omitempty"`
	// The normalisation and weighting set for the calculation.
	NwSet *Ref `protobuf:"bytes,5,opt,name=nw_set,json=nwSet,proto3" json:"nw_set,omitempty"`
	// A list of parameter redefinitions that should be used in the calculation.
	Parameters []*ParameterRedef `protobuf:"bytes,6,rep,name=parameters,proto3" json:"parameters,omitempty"`
	// The calculation type to be used in the calculation.
	Allocation AllocationType `protobuf:"varint,7,opt,name=allocation,proto3,enum=protolca.AllocationType" json:"allocation,omitempty"`
	// Indicates whether life cycle costs should be also calculated.
	WithCosts bool `protobuf:"varint,8,opt,name=with_costs,json=withCosts,proto3" json:"with_costs,omitempty"`
	// Indicates whether a regionalized result should be calculated or not.
	WithRegionalization bool    `protobuf:"varint,9,opt,name=with_regionalization,json=withRegionalization,proto3" json:"with_regionalization,omitempty"`
	Unit                *Ref    `protobuf:"bytes,10,opt,name=unit,proto3" json:"unit,omitempty"`
	Amount              float64 `protobuf:"fixed64,11,opt,name=amount,proto3" json:"amount,omitempty"`
	FlowProperty        *Ref    `protobuf:"bytes,12,opt,name=flow_property,json=flowProperty,proto3" json:"flow_property,omitempty"`
	// This field is only valid when this setup describes a Monte Carlo
	// simulation and contains the number of simulation runs in that case.
	NumberOfRuns int32 `protobuf:"varint,13,opt,name=number_of_runs,json=numberOfRuns,proto3" json:"number_of_runs,omitempty"`
}

func (x *CalculationSetup) Reset() {
	*x = CalculationSetup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculationSetup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculationSetup) ProtoMessage() {}

func (x *CalculationSetup) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculationSetup.ProtoReflect.Descriptor instead.
func (*CalculationSetup) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{2}
}

func (x *CalculationSetup) GetCalculationType() CalculationType {
	if x != nil {
		return x.CalculationType
	}
	return CalculationType_UNDEFINED_CALCULATION_TYPE
}

func (x *CalculationSetup) GetProductSystem() *Ref {
	if x != nil {
		return x.ProductSystem
	}
	return nil
}

func (x *CalculationSetup) GetProcess() *Ref {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *CalculationSetup) GetImpactMethod() *Ref {
	if x != nil {
		return x.ImpactMethod
	}
	return nil
}

func (x *CalculationSetup) GetNwSet() *Ref {
	if x != nil {
		return x.NwSet
	}
	return nil
}

func (x *CalculationSetup) GetParameters() []*ParameterRedef {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *CalculationSetup) GetAllocation() AllocationType {
	if x != nil {
		return x.Allocation
	}
	return AllocationType_UNDEFINED_ALLOCATION_TYPE
}

func (x *CalculationSetup) GetWithCosts() bool {
	if x != nil {
		return x.WithCosts
	}
	return false
}

func (x *CalculationSetup) GetWithRegionalization() bool {
	if x != nil {
		return x.WithRegionalization
	}
	return false
}

func (x *CalculationSetup) GetUnit() *Ref {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *CalculationSetup) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CalculationSetup) GetFlowProperty() *Ref {
	if x != nil {
		return x.FlowProperty
	}
	return nil
}

func (x *CalculationSetup) GetNumberOfRuns() int32 {
	if x != nil {
		return x.NumberOfRuns
	}
	return 0
}

// A category is used for the categorisation of types like processes, flows,
// etc. The tricky thing is that the `Category` class inherits also from the
// [CategorizedEntity] type so that a category can have a category attribute
// which is then the parent category of this category (uff).
type Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reference ID (typically an UUID) of the entity.
	Id string `protobuf:"bytes,1,opt,name=id,json=@id,proto3" json:"id,omitempty"`
	// The name of the entity.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the entity.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// A version number in MAJOR.MINOR.PATCH format where the MINOR and PATCH
	// fields are optional and the fields may have leading zeros (so 01.00.00 is
	// the same as 1.0.0 or 1).
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// The timestamp when the entity was changed the last time.
	LastChange string `protobuf:"bytes,5,opt,name=last_change,json=lastChange,proto3" json:"last_change,omitempty"`
	// The type name of the respective entity.
	EntityType EntityType `protobuf:"varint,6,opt,name=entity_type,json=@type,proto3,enum=protolca.commons.EntityType" json:"entity_type,omitempty"`
	// The category of the entity.
	Category *Ref `protobuf:"bytes,7,opt,name=category,proto3" json:"category,omitempty"`
	// A list of optional tags. A tag is just a string which should not contain
	// commas (and other special characters).
	Tags []string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	// If this entity is part of a library, this field contains the identifier of
	// that library. The identifier is typically just the combination of the
	// library name and version.
	Library string `protobuf:"bytes,9,opt,name=library,proto3" json:"library,omitempty"`
	// The type of models that can be linked to the category.
	ModelType ModelType `protobuf:"varint,10,opt,name=model_type,json=modelType,proto3,enum=protolca.ModelType" json:"model_type,omitempty"`
}

func (x *Category) Reset() {
	*x = Category{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Category) ProtoMessage() {}

func (x *Category) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Category.ProtoReflect.Descriptor instead.
func (*Category) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{3}
}

func (x *Category) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Category) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Category) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Category) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Category) GetLastChange() string {
	if x != nil {
		return x.LastChange
	}
	return ""
}

func (x *Category) GetEntityType() EntityType {
	if x != nil {
		return x.EntityType
	}
	return EntityType_Undefined
}

func (x *Category) GetCategory() *Ref {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Category) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Category) GetLibrary() string {
	if x != nil {
		return x.Library
	}
	return ""
}

func (x *Category) GetModelType() ModelType {
	if x != nil {
		return x.ModelType
	}
	return ModelType_UNDEFINED_MODEL_TYPE
}

type Currency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reference ID (typically an UUID) of the entity.
	Id string `protobuf:"bytes,1,opt,name=id,json=@id,proto3" json:"id,omitempty"`
	// The name of the entity.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the entity.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// A version number in MAJOR.MINOR.PATCH format where the MINOR and PATCH
	// fields are optional and the fields may have leading zeros (so 01.00.00 is
	// the same as 1.0.0 or 1).
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// The timestamp when the entity was changed the last time.
	LastChange string `protobuf:"bytes,5,opt,name=last_change,json=lastChange,proto3" json:"last_change,omitempty"`
	// The type name of the respective entity.
	EntityType EntityType `protobuf:"varint,6,opt,name=entity_type,json=@type,proto3,enum=protolca.commons.EntityType" json:"entity_type,omitempty"`
	// The category of the entity.
	Category *Ref `protobuf:"bytes,7,opt,name=category,proto3" json:"category,omitempty"`
	// A list of optional tags. A tag is just a string which should not contain
	// commas (and other special characters).
	Tags []string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	// If this entity is part of a library, this field contains the identifier of
	// that library. The identifier is typically just the combination of the
	// library name and version.
	Library           string  `protobuf:"bytes,9,opt,name=library,proto3" json:"library,omitempty"`
	Code              string  `protobuf:"bytes,10,opt,name=code,proto3" json:"code,omitempty"`
	ConversionFactor  float64 `protobuf:"fixed64,11,opt,name=conversion_factor,json=conversionFactor,proto3" json:"conversion_factor,omitempty"`
	ReferenceCurrency *Ref    `protobuf:"bytes,12,opt,name=reference_currency,json=referenceCurrency,proto3" json:"reference_currency,omitempty"`
}

func (x *Currency) Reset() {
	*x = Currency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency) ProtoMessage() {}

func (x *Currency) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency.ProtoReflect.Descriptor instead.
func (*Currency) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{4}
}

func (x *Currency) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Currency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Currency) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Currency) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Currency) GetLastChange() string {
	if x != nil {
		return x.LastChange
	}
	return ""
}

func (x *Currency) GetEntityType() EntityType {
	if x != nil {
		return x.EntityType
	}
	return EntityType_Undefined
}

func (x *Currency) GetCategory() *Ref {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Currency) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Currency) GetLibrary() string {
	if x != nil {
		return x.Library
	}
	return ""
}

func (x *Currency) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Currency) GetConversionFactor() float64 {
	if x != nil {
		return x.ConversionFactor
	}
	return 0
}

func (x *Currency) GetReferenceCurrency() *Ref {
	if x != nil {
		return x.ReferenceCurrency
	}
	return nil
}

// An indicator of a data quality system ([DQSystem]).
type DQIndicator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Position int32      `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	Scores   []*DQScore `protobuf:"bytes,3,rep,name=scores,proto3" json:"scores,omitempty"`
}

func (x *DQIndicator) Reset() {
	*x = DQIndicator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DQIndicator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DQIndicator) ProtoMessage() {}

func (x *DQIndicator) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DQIndicator.ProtoReflect.Descriptor instead.
func (*DQIndicator) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{5}
}

func (x *DQIndicator) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DQIndicator) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *DQIndicator) GetScores() []*DQScore {
	if x != nil {
		return x.Scores
	}
	return nil
}

// An score value of an indicator ([DQIndicator]) in a data quality system
// ([DQSystem]).
type DQScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position    int32   `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`
	Label       string  `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Description string  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Uncertainty float64 `protobuf:"fixed64,4,opt,name=uncertainty,proto3" json:"uncertainty,omitempty"`
}

func (x *DQScore) Reset() {
	*x = DQScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DQScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DQScore) ProtoMessage() {}

func (x *DQScore) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DQScore.ProtoReflect.Descriptor instead.
func (*DQScore) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{6}
}

func (x *DQScore) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *DQScore) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *DQScore) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DQScore) GetUncertainty() float64 {
	if x != nil {
		return x.Uncertainty
	}
	return 0
}

// A data quality system (DQS) in openLCA describes a pedigree matrix of $m$
// data quality indicators (DQIs) and $n$ data quality scores (DQ scores). Such
// a system can then be used to assess the data quality of processes and
// exchanges by tagging them with an instance of the system $D$ where $D$ is a
// $m * n$ matrix with an entry $d_{ij}$ containing the value of the data
// quality score $j$ for indicator $i$. As each indicator in $D$ can only have
// a single score value, $D$ can be stored in a vector $d$ where $d_i$ contains
// the data quality score for indicator $i$. The possible values of the data
// quality scores are defined as a linear order $1 \dots n$. In openLCA, the
// data quality entry $d$ of a process or exchange is stored as a string like
// `(3;2;4;n.a.;2)` which means the data quality score for the first indicator
// is `3`, for the second `2` etc. A specific value is `n.a.` which stands for
// _not applicable_. In calculations, these data quality entries can be
// aggregated in different ways. For example, the data quality entry of a flow
// $f$ with a contribution of `0.5 kg` and a data quality entry of
// `(3;2;4;n.a.;2)` in a process $p$ and a contribution of `1.5 kg` and a data
// quality entry of `(2;3;1;n.a.;5)` in a process $q$ could be aggregated to
// `(2;3;2;n.a.;4)` by applying an weighted average and rounding. Finally,
// custom labels like `A, B, C, ...` or `Very good, Good, Fair, ...` for the DQ
// scores can be assigned by the user. These labels are then displayed instead
// of `1, 2, 3 ...` in the user interface or result exports. However,
// internally the numeric values are used in the data model and calculations.
type DQSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reference ID (typically an UUID) of the entity.
	Id string `protobuf:"bytes,1,opt,name=id,json=@id,proto3" json:"id,omitempty"`
	// The name of the entity.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the entity.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// A version number in MAJOR.MINOR.PATCH format where the MINOR and PATCH
	// fields are optional and the fields may have leading zeros (so 01.00.00 is
	// the same as 1.0.0 or 1).
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// The timestamp when the entity was changed the last time.
	LastChange string `protobuf:"bytes,5,opt,name=last_change,json=lastChange,proto3" json:"last_change,omitempty"`
	// The type name of the respective entity.
	EntityType EntityType `protobuf:"varint,6,opt,name=entity_type,json=@type,proto3,enum=protolca.commons.EntityType" json:"entity_type,omitempty"`
	// The category of the entity.
	Category *Ref `protobuf:"bytes,7,opt,name=category,proto3" json:"category,omitempty"`
	// A list of optional tags. A tag is just a string which should not contain
	// commas (and other special characters).
	Tags []string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	// If this entity is part of a library, this field contains the identifier of
	// that library. The identifier is typically just the combination of the
	// library name and version.
	Library          string         `protobuf:"bytes,9,opt,name=library,proto3" json:"library,omitempty"`
	HasUncertainties bool           `protobuf:"varint,10,opt,name=has_uncertainties,json=hasUncertainties,proto3" json:"has_uncertainties,omitempty"`
	Source           *Ref           `protobuf:"bytes,11,opt,name=source,proto3" json:"source,omitempty"`
	Indicators       []*DQIndicator `protobuf:"bytes,12,rep,name=indicators,proto3" json:"indicators,omitempty"`
}

func (x *DQSystem) Reset() {
	*x = DQSystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DQSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DQSystem) ProtoMessage() {}

func (x *DQSystem) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DQSystem.ProtoReflect.Descriptor instead.
func (*DQSystem) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{7}
}

func (x *DQSystem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DQSystem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DQSystem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DQSystem) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DQSystem) GetLastChange() string {
	if x != nil {
		return x.LastChange
	}
	return ""
}

func (x *DQSystem) GetEntityType() EntityType {
	if x != nil {
		return x.EntityType
	}
	return EntityType_Undefined
}

func (x *DQSystem) GetCategory() *Ref {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *DQSystem) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DQSystem) GetLibrary() string {
	if x != nil {
		return x.Library
	}
	return ""
}

func (x *DQSystem) GetHasUncertainties() bool {
	if x != nil {
		return x.HasUncertainties
	}
	return false
}

func (x *DQSystem) GetSource() *Ref {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *DQSystem) GetIndicators() []*DQIndicator {
	if x != nil {
		return x.Indicators
	}
	return nil
}

// An Exchange is an input or output of a [Flow] in a [Process]. The amount of
// an exchange is given in a specific unit of a quantity ([FlowProperty]) of
// the flow. The allowed units and flow properties that can be used for a flow
// in an exchange are defined by the flow property information in that flow
// (see also the [FlowPropertyFactor] type).
type Exchange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates whether this exchange is an avoided product.
	AvoidedProduct bool `protobuf:"varint,1,opt,name=avoided_product,json=avoidedProduct,proto3" json:"avoided_product,omitempty"`
	// A formula for calculating the costs of this exchange.
	CostFormula string `protobuf:"bytes,2,opt,name=cost_formula,json=costFormula,proto3" json:"cost_formula,omitempty"`
	// The costs of this exchange.
	CostValue float64 `protobuf:"fixed64,3,opt,name=cost_value,json=costValue,proto3" json:"cost_value,omitempty"`
	// The currency in which the costs of this exchange are given.
	Currency *Ref `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	// The process internal ID of the exchange. This is used to identify
	// exchanges unambiguously within a process (e.g. when linking exchanges in a
	// product system where multiple exchanges with the same flow are allowed).
	// The value should be >= 1.
	InternalId int32 `protobuf:"varint,5,opt,name=internal_id,json=internalId,proto3" json:"internal_id,omitempty"`
	// The reference to the flow of the exchange.
	Flow *Ref `protobuf:"bytes,6,opt,name=flow,proto3" json:"flow,omitempty"`
	// The quantity in which the amount is given.
	FlowProperty *Ref `protobuf:"bytes,7,opt,name=flow_property,json=flowProperty,proto3" json:"flow_property,omitempty"`
	Input        bool `protobuf:"varint,8,opt,name=input,proto3" json:"input,omitempty"`
	// Indicates whether the exchange is the quantitative reference of the
	// process.
	QuantitativeReference bool    `protobuf:"varint,9,opt,name=quantitative_reference,json=quantitativeReference,proto3" json:"quantitative_reference,omitempty"`
	BaseUncertainty       float64 `protobuf:"fixed64,10,opt,name=base_uncertainty,json=baseUncertainty,proto3" json:"base_uncertainty,omitempty"`
	// A default provider is a [Process] that is linked as the provider of a
	// product input or the waste treatment provider of a waste output. It is
	// just an optional default setting which can be also ignored when building
	// product systems in openLCA. The user is always free to link processes in
	// product systems ignoring these defaults (but the flows and flow directions
	// have to match of course).
	DefaultProvider *Ref    `protobuf:"bytes,11,opt,name=default_provider,json=defaultProvider,proto3" json:"default_provider,omitempty"`
	Amount          float64 `protobuf:"fixed64,12,opt,name=amount,proto3" json:"amount,omitempty"`
	AmountFormula   string  `protobuf:"bytes,13,opt,name=amount_formula,json=amountFormula,proto3" json:"amount_formula,omitempty"`
	Unit            *Ref    `protobuf:"bytes,14,opt,name=unit,proto3" json:"unit,omitempty"`
	// A data quality entry like `(1;3;2;5;1)`. The entry is a vector of data
	// quality values that need to match the data quality scheme for flow inputs
	// and outputs that is assigned to the [Process]. In such a scheme the data
	// quality indicators have fixed positions and the respective values in the
	// `dqEntry` vector map to these positions.
	DqEntry     string       `protobuf:"bytes,15,opt,name=dq_entry,json=dqEntry,proto3" json:"dq_entry,omitempty"`
	Uncertainty *Uncertainty `protobuf:"bytes,16,opt,name=uncertainty,proto3" json:"uncertainty,omitempty"`
	// A general comment about the input or output.
	Description string `protobuf:"bytes,17,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Exchange) Reset() {
	*x = Exchange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Exchange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exchange) ProtoMessage() {}

func (x *Exchange) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Exchange.ProtoReflect.Descriptor instead.
func (*Exchange) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{8}
}

func (x *Exchange) GetAvoidedProduct() bool {
	if x != nil {
		return x.AvoidedProduct
	}
	return false
}

func (x *Exchange) GetCostFormula() string {
	if x != nil {
		return x.CostFormula
	}
	return ""
}

func (x *Exchange) GetCostValue() float64 {
	if x != nil {
		return x.CostValue
	}
	return 0
}

func (x *Exchange) GetCurrency() *Ref {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *Exchange) GetInternalId() int32 {
	if x != nil {
		return x.InternalId
	}
	return 0
}

func (x *Exchange) GetFlow() *Ref {
	if x != nil {
		return x.Flow
	}
	return nil
}

func (x *Exchange) GetFlowProperty() *Ref {
	if x != nil {
		return x.FlowProperty
	}
	return nil
}

func (x *Exchange) GetInput() bool {
	if x != nil {
		return x.Input
	}
	return false
}

func (x *Exchange) GetQuantitativeReference() bool {
	if x != nil {
		return x.QuantitativeReference
	}
	return false
}

func (x *Exchange) GetBaseUncertainty() float64 {
	if x != nil {
		return x.BaseUncertainty
	}
	return 0
}

func (x *Exchange) GetDefaultProvider() *Ref {
	if x != nil {
		return x.DefaultProvider
	}
	return nil
}

func (x *Exchange) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Exchange) GetAmountFormula() string {
	if x != nil {
		return x.AmountFormula
	}
	return ""
}

func (x *Exchange) GetUnit() *Ref {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *Exchange) GetDqEntry() string {
	if x != nil {
		return x.DqEntry
	}
	return ""
}

func (x *Exchange) GetUncertainty() *Uncertainty {
	if x != nil {
		return x.Uncertainty
	}
	return nil
}

func (x *Exchange) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// An instance of this class describes a reference to an exchange in a process.
// When we reference such an exchange we only need the information to indentify
// that exchange unambiguously in a process.
type ExchangeRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The internal ID of the exchange.
	InternalId int32 `protobuf:"varint,1,opt,name=internal_id,json=internalId,proto3" json:"internal_id,omitempty"`
}

func (x *ExchangeRef) Reset() {
	*x = ExchangeRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRef) ProtoMessage() {}

func (x *ExchangeRef) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeRef.ProtoReflect.Descriptor instead.
func (*ExchangeRef) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{9}
}

func (x *ExchangeRef) GetInternalId() int32 {
	if x != nil {
		return x.InternalId
	}
	return 0
}

// Everything that can be an input or output of a process (e.g. a substance, a
// product, a waste, a service etc.)
type Flow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reference ID (typically an UUID) of the entity.
	Id string `protobuf:"bytes,1,opt,name=id,json=@id,proto3" json:"id,omitempty"`
	// The name of the entity.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the entity.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// A version number in MAJOR.MINOR.PATCH format where the MINOR and PATCH
	// fields are optional and the fields may have leading zeros (so 01.00.00 is
	// the same as 1.0.0 or 1).
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// The timestamp when the entity was changed the last time.
	LastChange string `protobuf:"bytes,5,opt,name=last_change,json=lastChange,proto3" json:"last_change,omitempty"`
	// The type name of the respective entity.
	EntityType EntityType `protobuf:"varint,6,opt,name=entity_type,json=@type,proto3,enum=protolca.commons.EntityType" json:"entity_type,omitempty"`
	// The category of the entity.
	Category *Ref `protobuf:"bytes,7,opt,name=category,proto3" json:"category,omitempty"`
	// A list of optional tags. A tag is just a string which should not contain
	// commas (and other special characters).
	Tags []string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	// If this entity is part of a library, this field contains the identifier of
	// that library. The identifier is typically just the combination of the
	// library name and version.
	Library string `protobuf:"bytes,9,opt,name=library,proto3" json:"library,omitempty"`
	// The type of the flow. Note that this type is more a descriptor of how the
	// flow is handled in calculations.
	FlowType FlowType `protobuf:"varint,10,opt,name=flow_type,json=flowType,proto3,enum=protolca.FlowType" json:"flow_type,omitempty"`
	// A CAS number of the flow.
	Cas string `protobuf:"bytes,11,opt,name=cas,proto3" json:"cas,omitempty"`
	// A chemical formula of the flow.
	Formula string `protobuf:"bytes,12,opt,name=formula,proto3" json:"formula,omitempty"`
	// The flow properties (quantities) in which amounts of the flow can be
	// expressed together with conversion factors between these flow flow
	// properties.
	FlowProperties []*FlowPropertyFactor `protobuf:"bytes,13,rep,name=flow_properties,json=flowProperties,proto3" json:"flow_properties,omitempty"`
	// The location of the flow. Normally the location of a flow is defined by
	// the process location where the flow is an input or output. However, some
	// data formats define a location as a property of a flow.
	Location *Ref `protobuf:"bytes,14,opt,name=location,proto3" json:"location,omitempty"`
	// A list of synonyms but packed into a single field. Best is to use
	// semicolons as separator as commas are sometimes used in names of
	// chemicals.
	Synonyms string `protobuf:"bytes,15,opt,name=synonyms,proto3" json:"synonyms,omitempty"`
	// Indicates whether this flow describes an infrastructure product. This
	// field is part of the openLCA schema because of backward compatibility with
	// EcoSpold 1. It does not really have a meaning in openLCA and should not be
	// used anymore.
	InfrastructureFlow bool `protobuf:"varint,16,opt,name=infrastructure_flow,json=infrastructureFlow,proto3" json:"infrastructure_flow,omitempty"`
}

func (x *Flow) Reset() {
	*x = Flow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flow) ProtoMessage() {}

func (x *Flow) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flow.ProtoReflect.Descriptor instead.
func (*Flow) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{10}
}

func (x *Flow) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Flow) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Flow) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Flow) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Flow) GetLastChange() string {
	if x != nil {
		return x.LastChange
	}
	return ""
}

func (x *Flow) GetEntityType() EntityType {
	if x != nil {
		return x.EntityType
	}
	return EntityType_Undefined
}

func (x *Flow) GetCategory() *Ref {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Flow) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Flow) GetLibrary() string {
	if x != nil {
		return x.Library
	}
	return ""
}

func (x *Flow) GetFlowType() FlowType {
	if x != nil {
		return x.FlowType
	}
	return FlowType_UNDEFINED_FLOW_TYPE
}

func (x *Flow) GetCas() string {
	if x != nil {
		return x.Cas
	}
	return ""
}

func (x *Flow) GetFormula() string {
	if x != nil {
		return x.Formula
	}
	return ""
}

func (x *Flow) GetFlowProperties() []*FlowPropertyFactor {
	if x != nil {
		return x.FlowProperties
	}
	return nil
}

func (x *Flow) GetLocation() *Ref {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Flow) GetSynonyms() string {
	if x != nil {
		return x.Synonyms
	}
	return ""
}

func (x *Flow) GetInfrastructureFlow() bool {
	if x != nil {
		return x.InfrastructureFlow
	}
	return false
}

// A crosswalk of flows from a source flow list to a target flow list.
type FlowMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reference ID (typically an UUID) of the entity.
	Id string `protobuf:"bytes,1,opt,name=id,json=@id,proto3" json:"id,omitempty"`
	// The name of the entity.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the entity.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// A version number in MAJOR.MINOR.PATCH format where the MINOR and PATCH
	// fields are optional and the fields may have leading zeros (so 01.00.00 is
	// the same as 1.0.0 or 1).
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// The timestamp when the entity was changed the last time.
	LastChange string `protobuf:"bytes,5,opt,name=last_change,json=lastChange,proto3" json:"last_change,omitempty"`
	// The reference (id, name, description) of the source flow list.
	Source *Ref `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
	// The reference (id, name, description) of the target flow list.
	Target *Ref `protobuf:"bytes,7,opt,name=target,proto3" json:"target,omitempty"`
	// A list of flow mappings from flows in a source flow list to flows in a
	// target flow list.
	Mappings []*FlowMapEntry `protobuf:"bytes,8,rep,name=mappings,proto3" json:"mappings,omitempty"`
}

func (x *FlowMap) Reset() {
	*x = FlowMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowMap) ProtoMessage() {}

func (x *FlowMap) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowMap.ProtoReflect.Descriptor instead.
func (*FlowMap) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{11}
}

func (x *FlowMap) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FlowMap) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FlowMap) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FlowMap) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *FlowMap) GetLastChange() string {
	if x != nil {
		return x.LastChange
	}
	return ""
}

func (x *FlowMap) GetSource() *Ref {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *FlowMap) GetTarget() *Ref {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *FlowMap) GetMappings() []*FlowMapEntry {
	if x != nil {
		return x.Mappings
	}
	return nil
}

// A mapping from a source flow to a target flow.
type FlowMapEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Describes the source flow of the mapping.
	From *FlowMapRef `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// Describes the target of the mapping.
	To *FlowMapRef `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// The conversion factor to convert the amount of 1 unit of the source flow
	// into the corresponding quantity of the target flow.
	ConversionFactor float64 `protobuf:"fixed64,3,opt,name=conversion_factor,json=conversionFactor,proto3" json:"conversion_factor,omitempty"`
}

func (x *FlowMapEntry) Reset() {
	*x = FlowMapEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowMapEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowMapEntry) ProtoMessage() {}

func (x *FlowMapEntry) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowMapEntry.ProtoReflect.Descriptor instead.
func (*FlowMapEntry) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{12}
}

func (x *FlowMapEntry) GetFrom() *FlowMapRef {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *FlowMapEntry) GetTo() *FlowMapRef {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *FlowMapEntry) GetConversionFactor() float64 {
	if x != nil {
		return x.ConversionFactor
	}
	return 0
}

// Describes a source or target flow in a `FlowMappingEntry` of a `FlowMap`.
// Such a flow reference can also optionally specify the unit and flow property
// (quantity) for which the mapping is valid. If the unit or quantity is not
// given, the mapping is based on the respective reference unit and reference
// flow property of the flow.
type FlowMapRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reference to the flow data set.
	Flow *Ref `protobuf:"bytes,1,opt,name=flow,proto3" json:"flow,omitempty"`
	// An optional reference to a flow property of the flow for which the mapping
	// is valid.
	FlowProperty *Ref `protobuf:"bytes,2,opt,name=flow_property,json=flowProperty,proto3" json:"flow_property,omitempty"`
	// An optional reference to a unit of the flow for which the mapping is valid
	Unit *Ref `protobuf:"bytes,3,opt,name=unit,proto3" json:"unit,omitempty"`
	// In case of a product or waste flow a flow mapping can contain a provider
	// which is the process that produces the product or a waste treatment
	// process that consumes the waste flow. This is useful when we want to apply
	// mappings of product and waste flows on databases and link them in the
	// corresponding processes and product systems.
	Provider *Ref `protobuf:"bytes,4,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *FlowMapRef) Reset() {
	*x = FlowMapRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowMapRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowMapRef) ProtoMessage() {}

func (x *FlowMapRef) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowMapRef.ProtoReflect.Descriptor instead.
func (*FlowMapRef) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{13}
}

func (x *FlowMapRef) GetFlow() *Ref {
	if x != nil {
		return x.Flow
	}
	return nil
}

func (x *FlowMapRef) GetFlowProperty() *Ref {
	if x != nil {
		return x.FlowProperty
	}
	return nil
}

func (x *FlowMapRef) GetUnit() *Ref {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *FlowMapRef) GetProvider() *Ref {
	if x != nil {
		return x.Provider
	}
	return nil
}

// A flow property is a quantity that can be used to express amounts of a flow.
type FlowProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reference ID (typically an UUID) of the entity.
	Id string `protobuf:"bytes,1,opt,name=id,json=@id,proto3" json:"id,omitempty"`
	// The name of the entity.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the entity.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// A version number in MAJOR.MINOR.PATCH format where the MINOR and PATCH
	// fields are optional and the fields may have leading zeros (so 01.00.00 is
	// the same as 1.0.0 or 1).
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// The timestamp when the entity was changed the last time.
	LastChange string `protobuf:"bytes,5,opt,name=last_change,json=lastChange,proto3" json:"last_change,omitempty"`
	// The type name of the respective entity.
	EntityType EntityType `protobuf:"varint,6,opt,name=entity_type,json=@type,proto3,enum=protolca.commons.EntityType" json:"entity_type,omitempty"`
	// The category of the entity.
	Category *Ref `protobuf:"bytes,7,opt,name=category,proto3" json:"category,omitempty"`
	// A list of optional tags. A tag is just a string which should not contain
	// commas (and other special characters).
	Tags []string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	// If this entity is part of a library, this field contains the identifier of
	// that library. The identifier is typically just the combination of the
	// library name and version.
	Library string `protobuf:"bytes,9,opt,name=library,proto3" json:"library,omitempty"`
	// The type of the flow property
	FlowPropertyType FlowPropertyType `protobuf:"varint,10,opt,name=flow_property_type,json=flowPropertyType,proto3,enum=protolca.FlowPropertyType" json:"flow_property_type,omitempty"`
	// The units of measure that can be used to express quantities of the flow
	// property.
	UnitGroup *Ref `protobuf:"bytes,11,opt,name=unit_group,json=unitGroup,proto3" json:"unit_group,omitempty"`
}

func (x *FlowProperty) Reset() {
	*x = FlowProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowProperty) ProtoMessage() {}

func (x *FlowProperty) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowProperty.ProtoReflect.Descriptor instead.
func (*FlowProperty) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{14}
}

func (x *FlowProperty) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FlowProperty) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FlowProperty) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FlowProperty) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *FlowProperty) GetLastChange() string {
	if x != nil {
		return x.LastChange
	}
	return ""
}

func (x *FlowProperty) GetEntityType() EntityType {
	if x != nil {
		return x.EntityType
	}
	return EntityType_Undefined
}

func (x *FlowProperty) GetCategory() *Ref {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *FlowProperty) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *FlowProperty) GetLibrary() string {
	if x != nil {
		return x.Library
	}
	return ""
}

func (x *FlowProperty) GetFlowPropertyType() FlowPropertyType {
	if x != nil {
		return x.FlowPropertyType
	}
	return FlowPropertyType_UNDEFINED_FLOW_PROPERTY_TYPE
}

func (x *FlowProperty) GetUnitGroup() *Ref {
	if x != nil {
		return x.UnitGroup
	}
	return nil
}

// A FlowPropertyFactor is a conversion factor between <a
// href="./FlowProperty.html">flow properties (quantities)</a> of a <a
// href="./Flow.html">flow</a>. As an example the amount of the flow 'water' in
// a process could be expressed in 'kg' mass or 'm3' volume. In this case the
// flow water would have two flow property factors: one for the flow property
// 'mass' and one for 'volume'. Each of these flow properties has a reference
// to a <a href="./UnitGroup.html">unit group</a> which again has a reference
// unit. In the example the flow property 'mass' could reference the unit group
// 'units of mass' with 'kg' as reference unit and volume could reference the
// unit group 'units of volume' with 'm3' as reference unit. The flow property
// factor is now the conversion factor between these two reference units where
// the factor of the reference flow property of the flow is 1. If the reference
// flow property of 'water' in the example would be 'mass' the respective flow
// property factor would be 1 and the factor for 'volume' would be 0.001 (as 1
// kg water is 0.001 m3). The amount of water in a process can now be also
// given in liter, tons, grams etc. For this, the unit conversion factor of the
// respective unit group can be used to convert into the reference unit (which
// then can be used to convert to the reference unit of another flow property).
// Another thing to note is that different flow properties can refer to the
// same unit group (e.g. MJ upper calorific value and MJ lower calorific
// value.)
type FlowPropertyFactor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The flow property (quantity) of the factor.
	FlowProperty *Ref `protobuf:"bytes,1,opt,name=flow_property,json=flowProperty,proto3" json:"flow_property,omitempty"`
	// The value of the conversion factor.
	ConversionFactor float64 `protobuf:"fixed64,2,opt,name=conversion_factor,json=conversionFactor,proto3" json:"conversion_factor,omitempty"`
	// Indicates whether the flow property of the factor is the reference flow
	// property of the flow. The reference flow property must have a conversion
	// factor of 1.0 and there should be only one reference flow property.
	ReferenceFlowProperty bool `protobuf:"varint,3,opt,name=reference_flow_property,json=referenceFlowProperty,proto3" json:"reference_flow_property,omitempty"`
}

func (x *FlowPropertyFactor) Reset() {
	*x = FlowPropertyFactor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowPropertyFactor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowPropertyFactor) ProtoMessage() {}

func (x *FlowPropertyFactor) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowPropertyFactor.ProtoReflect.Descriptor instead.
func (*FlowPropertyFactor) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{15}
}

func (x *FlowPropertyFactor) GetFlowProperty() *Ref {
	if x != nil {
		return x.FlowProperty
	}
	return nil
}

func (x *FlowPropertyFactor) GetConversionFactor() float64 {
	if x != nil {
		return x.ConversionFactor
	}
	return 0
}

func (x *FlowPropertyFactor) GetReferenceFlowProperty() bool {
	if x != nil {
		return x.ReferenceFlowProperty
	}
	return false
}

// A result value for a flow; given in the reference unit of the flow.
type FlowResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The flow reference.
	Flow *Ref `protobuf:"bytes,1,opt,name=flow,proto3" json:"flow,omitempty"`
	// Indicates whether the flow is an input or not.
	Input bool `protobuf:"varint,2,opt,name=input,proto3" json:"input,omitempty"`
	// The value of the flow amount.
	Value float64 `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
	// The (reference to the) location of this flow result in case of a
	// regionalized result.
	Location *Ref `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *FlowResult) Reset() {
	*x = FlowResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowResult) ProtoMessage() {}

func (x *FlowResult) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowResult.ProtoReflect.Descriptor instead.
func (*FlowResult) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{16}
}

func (x *FlowResult) GetFlow() *Ref {
	if x != nil {
		return x.Flow
	}
	return nil
}

func (x *FlowResult) GetInput() bool {
	if x != nil {
		return x.Input
	}
	return false
}

func (x *FlowResult) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *FlowResult) GetLocation() *Ref {
	if x != nil {
		return x.Location
	}
	return nil
}

type ImpactCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reference ID (typically an UUID) of the entity.
	Id string `protobuf:"bytes,1,opt,name=id,json=@id,proto3" json:"id,omitempty"`
	// The name of the entity.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the entity.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// A version number in MAJOR.MINOR.PATCH format where the MINOR and PATCH
	// fields are optional and the fields may have leading zeros (so 01.00.00 is
	// the same as 1.0.0 or 1).
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// The timestamp when the entity was changed the last time.
	LastChange string `protobuf:"bytes,5,opt,name=last_change,json=lastChange,proto3" json:"last_change,omitempty"`
	// The type name of the respective entity.
	EntityType EntityType `protobuf:"varint,6,opt,name=entity_type,json=@type,proto3,enum=protolca.commons.EntityType" json:"entity_type,omitempty"`
	// The category of the entity.
	Category *Ref `protobuf:"bytes,7,opt,name=category,proto3" json:"category,omitempty"`
	// A list of optional tags. A tag is just a string which should not contain
	// commas (and other special characters).
	Tags []string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	// If this entity is part of a library, this field contains the identifier of
	// that library. The identifier is typically just the combination of the
	// library name and version.
	Library string `protobuf:"bytes,9,opt,name=library,proto3" json:"library,omitempty"`
	// The name of the reference unit of the LCIA category (e.g. kg CO2-eq.).
	ReferenceUnitName string `protobuf:"bytes,10,opt,name=reference_unit_name,json=referenceUnitName,proto3" json:"reference_unit_name,omitempty"`
	// A set of parameters which can be used in formulas of the characterisation
	// factors in this impact category.
	Parameters []*Parameter `protobuf:"bytes,11,rep,name=parameters,proto3" json:"parameters,omitempty"`
	// The characterisation factors of the LCIA category.
	ImpactFactors []*ImpactFactor `protobuf:"bytes,12,rep,name=impact_factors,json=impactFactors,proto3" json:"impact_factors,omitempty"`
}

func (x *ImpactCategory) Reset() {
	*x = ImpactCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImpactCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImpactCategory) ProtoMessage() {}

func (x *ImpactCategory) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImpactCategory.ProtoReflect.Descriptor instead.
func (*ImpactCategory) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{17}
}

func (x *ImpactCategory) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ImpactCategory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ImpactCategory) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ImpactCategory) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ImpactCategory) GetLastChange() string {
	if x != nil {
		return x.LastChange
	}
	return ""
}

func (x *ImpactCategory) GetEntityType() EntityType {
	if x != nil {
		return x.EntityType
	}
	return EntityType_Undefined
}

func (x *ImpactCategory) GetCategory() *Ref {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *ImpactCategory) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ImpactCategory) GetLibrary() string {
	if x != nil {
		return x.Library
	}
	return ""
}

func (x *ImpactCategory) GetReferenceUnitName() string {
	if x != nil {
		return x.ReferenceUnitName
	}
	return ""
}

func (x *ImpactCategory) GetParameters() []*Parameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *ImpactCategory) GetImpactFactors() []*ImpactFactor {
	if x != nil {
		return x.ImpactFactors
	}
	return nil
}

// A single characterisation factor of a LCIA category for a flow.
type ImpactFactor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The [Flow] of the impact assessment factor.
	Flow *Ref `protobuf:"bytes,1,opt,name=flow,proto3" json:"flow,omitempty"`
	// In case of a regionalized impact category, this field can contain the
	// location for which this factor is valid.
	Location *Ref `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	// The quantity of the flow to which the LCIA factor is related (e.g. Mass).
	FlowProperty *Ref `protobuf:"bytes,3,opt,name=flow_property,json=flowProperty,proto3" json:"flow_property,omitempty"`
	// The flow unit to which the LCIA factor is related (e.g. kg).
	Unit *Ref `protobuf:"bytes,4,opt,name=unit,proto3" json:"unit,omitempty"`
	// The value of the impact assessment factor.
	Value float64 `protobuf:"fixed64,5,opt,name=value,proto3" json:"value,omitempty"`
	// A mathematical formula for calculating the value of the LCIA factor.
	Formula string `protobuf:"bytes,6,opt,name=formula,proto3" json:"formula,omitempty"`
	// The uncertainty distribution of the factors' value.
	Uncertainty *Uncertainty `protobuf:"bytes,7,opt,name=uncertainty,proto3" json:"uncertainty,omitempty"`
}

func (x *ImpactFactor) Reset() {
	*x = ImpactFactor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImpactFactor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImpactFactor) ProtoMessage() {}

func (x *ImpactFactor) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImpactFactor.ProtoReflect.Descriptor instead.
func (*ImpactFactor) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{18}
}

func (x *ImpactFactor) GetFlow() *Ref {
	if x != nil {
		return x.Flow
	}
	return nil
}

func (x *ImpactFactor) GetLocation() *Ref {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *ImpactFactor) GetFlowProperty() *Ref {
	if x != nil {
		return x.FlowProperty
	}
	return nil
}

func (x *ImpactFactor) GetUnit() *Ref {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *ImpactFactor) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ImpactFactor) GetFormula() string {
	if x != nil {
		return x.Formula
	}
	return ""
}

func (x *ImpactFactor) GetUncertainty() *Uncertainty {
	if x != nil {
		return x.Uncertainty
	}
	return nil
}

// An impact assessment method.
type ImpactMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reference ID (typically an UUID) of the entity.
	Id string `protobuf:"bytes,1,opt,name=id,json=@id,proto3" json:"id,omitempty"`
	// The name of the entity.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the entity.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// A version number in MAJOR.MINOR.PATCH format where the MINOR and PATCH
	// fields are optional and the fields may have leading zeros (so 01.00.00 is
	// the same as 1.0.0 or 1).
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// The timestamp when the entity was changed the last time.
	LastChange string `protobuf:"bytes,5,opt,name=last_change,json=lastChange,proto3" json:"last_change,omitempty"`
	// The type name of the respective entity.
	EntityType EntityType `protobuf:"varint,6,opt,name=entity_type,json=@type,proto3,enum=protolca.commons.EntityType" json:"entity_type,omitempty"`
	// The category of the entity.
	Category *Ref `protobuf:"bytes,7,opt,name=category,proto3" json:"category,omitempty"`
	// A list of optional tags. A tag is just a string which should not contain
	// commas (and other special characters).
	Tags []string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	// If this entity is part of a library, this field contains the identifier of
	// that library. The identifier is typically just the combination of the
	// library name and version.
	Library string `protobuf:"bytes,9,opt,name=library,proto3" json:"library,omitempty"`
	// The impact categories of the method.
	ImpactCategories []*Ref `protobuf:"bytes,10,rep,name=impact_categories,json=impactCategories,proto3" json:"impact_categories,omitempty"`
	// The normalization and weighting sets of the method.
	NwSets []*NwSet `protobuf:"bytes,11,rep,name=nw_sets,json=nwSets,proto3" json:"nw_sets,omitempty"`
}

func (x *ImpactMethod) Reset() {
	*x = ImpactMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImpactMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImpactMethod) ProtoMessage() {}

func (x *ImpactMethod) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImpactMethod.ProtoReflect.Descriptor instead.
func (*ImpactMethod) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{19}
}

func (x *ImpactMethod) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ImpactMethod) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ImpactMethod) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ImpactMethod) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ImpactMethod) GetLastChange() string {
	if x != nil {
		return x.LastChange
	}
	return ""
}

func (x *ImpactMethod) GetEntityType() EntityType {
	if x != nil {
		return x.EntityType
	}
	return EntityType_Undefined
}

func (x *ImpactMethod) GetCategory() *Ref {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *ImpactMethod) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ImpactMethod) GetLibrary() string {
	if x != nil {
		return x.Library
	}
	return ""
}

func (x *ImpactMethod) GetImpactCategories() []*Ref {
	if x != nil {
		return x.ImpactCategories
	}
	return nil
}

func (x *ImpactMethod) GetNwSets() []*NwSet {
	if x != nil {
		return x.NwSets
	}
	return nil
}

// A result value for an impact assessment category.
type ImpactResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reference to the impact assessment category.
	ImpactCategory *Ref `protobuf:"bytes,1,opt,name=impact_category,json=impactCategory,proto3" json:"impact_category,omitempty"`
	// The value of the flow amount.
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ImpactResult) Reset() {
	*x = ImpactResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImpactResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImpactResult) ProtoMessage() {}

func (x *ImpactResult) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImpactResult.ProtoReflect.Descriptor instead.
func (*ImpactResult) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{20}
}

func (x *ImpactResult) GetImpactCategory() *Ref {
	if x != nil {
		return x.ImpactCategory
	}
	return nil
}

func (x *ImpactResult) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// A location like a country, state, city, etc.
type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reference ID (typically an UUID) of the entity.
	Id string `protobuf:"bytes,1,opt,name=id,json=@id,proto3" json:"id,omitempty"`
	// The name of the entity.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the entity.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// A version number in MAJOR.MINOR.PATCH format where the MINOR and PATCH
	// fields are optional and the fields may have leading zeros (so 01.00.00 is
	// the same as 1.0.0 or 1).
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// The timestamp when the entity was changed the last time.
	LastChange string `protobuf:"bytes,5,opt,name=last_change,json=lastChange,proto3" json:"last_change,omitempty"`
	// The type name of the respective entity.
	EntityType EntityType `protobuf:"varint,6,opt,name=entity_type,json=@type,proto3,enum=protolca.commons.EntityType" json:"entity_type,omitempty"`
	// The category of the entity.
	Category *Ref `protobuf:"bytes,7,opt,name=category,proto3" json:"category,omitempty"`
	// A list of optional tags. A tag is just a string which should not contain
	// commas (and other special characters).
	Tags []string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	// If this entity is part of a library, this field contains the identifier of
	// that library. The identifier is typically just the combination of the
	// library name and version.
	Library string `protobuf:"bytes,9,opt,name=library,proto3" json:"library,omitempty"`
	// The code of the location (e.g. an ISO 2-letter country code).
	Code string `protobuf:"bytes,10,opt,name=code,proto3" json:"code,omitempty"`
	// The average latitude of the location.
	Latitude float64 `protobuf:"fixed64,11,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// The average longitude of the location.
	Longitude float64 `protobuf:"fixed64,12,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// A GeoJSON object.
	// When we map to the bytes type it means that we have no matching message
	// type and just put the raw bytes into the field. This is specifically true
	// for our geometry data of locations which cannot be translated to valid
	// GeoJSON using Protocol Buffers (as they do not support arrays of arrays).
	// To indicate that this is a different field than the field in the
	// olca-schema definition, we append the _bytes suffix to the field name
	GeometryBytes []byte `protobuf:"bytes,13,opt,name=geometry_bytes,json=geometryBytes,proto3" json:"geometry_bytes,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{21}
}

func (x *Location) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Location) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Location) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Location) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Location) GetLastChange() string {
	if x != nil {
		return x.LastChange
	}
	return ""
}

func (x *Location) GetEntityType() EntityType {
	if x != nil {
		return x.EntityType
	}
	return EntityType_Undefined
}

func (x *Location) GetCategory() *Ref {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Location) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Location) GetLibrary() string {
	if x != nil {
		return x.Library
	}
	return ""
}

func (x *Location) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Location) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Location) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Location) GetGeometryBytes() []byte {
	if x != nil {
		return x.GeometryBytes
	}
	return nil
}

// A normalization and weighting factor of a [NwSet] related to an impact
// category. Depending on the purpose of the [NwSet] (normalization, weighting,
// or both) the normalization and weighting factor can be present or not.
type NwFactor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImpactCategory      *Ref    `protobuf:"bytes,1,opt,name=impact_category,json=impactCategory,proto3" json:"impact_category,omitempty"`
	NormalisationFactor float64 `protobuf:"fixed64,2,opt,name=normalisation_factor,json=normalisationFactor,proto3" json:"normalisation_factor,omitempty"`
	WeightingFactor     float64 `protobuf:"fixed64,3,opt,name=weighting_factor,json=weightingFactor,proto3" json:"weighting_factor,omitempty"`
}

func (x *NwFactor) Reset() {
	*x = NwFactor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NwFactor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NwFactor) ProtoMessage() {}

func (x *NwFactor) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NwFactor.ProtoReflect.Descriptor instead.
func (*NwFactor) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{22}
}

func (x *NwFactor) GetImpactCategory() *Ref {
	if x != nil {
		return x.ImpactCategory
	}
	return nil
}

func (x *NwFactor) GetNormalisationFactor() float64 {
	if x != nil {
		return x.NormalisationFactor
	}
	return 0
}

func (x *NwFactor) GetWeightingFactor() float64 {
	if x != nil {
		return x.WeightingFactor
	}
	return 0
}

// A normalization and weighting set.
type NwSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reference ID (typically an UUID) of the entity.
	Id string `protobuf:"bytes,1,opt,name=id,json=@id,proto3" json:"id,omitempty"`
	// The name of the entity.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the entity.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// A version number in MAJOR.MINOR.PATCH format where the MINOR and PATCH
	// fields are optional and the fields may have leading zeros (so 01.00.00 is
	// the same as 1.0.0 or 1).
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// The timestamp when the entity was changed the last time.
	LastChange string `protobuf:"bytes,5,opt,name=last_change,json=lastChange,proto3" json:"last_change,omitempty"`
	// This is the optional unit of the (normalized and) weighted score when this
	// normalization and weighting set was applied on a LCIA result.
	WeightedScoreUnit string `protobuf:"bytes,6,opt,name=weighted_score_unit,json=weightedScoreUnit,proto3" json:"weighted_score_unit,omitempty"`
	// The list of normalization and weighting factors of this set.
	Factors []*NwFactor `protobuf:"bytes,7,rep,name=factors,proto3" json:"factors,omitempty"`
}

func (x *NwSet) Reset() {
	*x = NwSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NwSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NwSet) ProtoMessage() {}

func (x *NwSet) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NwSet.ProtoReflect.Descriptor instead.
func (*NwSet) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{23}
}

func (x *NwSet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NwSet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NwSet) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NwSet) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *NwSet) GetLastChange() string {
	if x != nil {
		return x.LastChange
	}
	return ""
}

func (x *NwSet) GetWeightedScoreUnit() string {
	if x != nil {
		return x.WeightedScoreUnit
	}
	return ""
}

func (x *NwSet) GetFactors() []*NwFactor {
	if x != nil {
		return x.Factors
	}
	return nil
}

// In openLCA, parameters can be defined in different scopes: global, process,
// or LCIA method. The parameter name can be used in formulas and, thus, need
// to conform to a specific syntax. Within a scope the parameter name should be
// unique (otherwise the evaluation is not deterministic). There are two types
// of parameters in openLCA: input parameters and dependent parameters. An
// input parameter can have an optional uncertainty distribution but not a
// formula. A dependent parameter can (should) have a formula (where also other
// parameters can be used) but no uncertainty distribution.
type Parameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reference ID (typically an UUID) of the entity.
	Id string `protobuf:"bytes,1,opt,name=id,json=@id,proto3" json:"id,omitempty"`
	// The name of the entity.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the entity.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// A version number in MAJOR.MINOR.PATCH format where the MINOR and PATCH
	// fields are optional and the fields may have leading zeros (so 01.00.00 is
	// the same as 1.0.0 or 1).
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// The timestamp when the entity was changed the last time.
	LastChange string `protobuf:"bytes,5,opt,name=last_change,json=lastChange,proto3" json:"last_change,omitempty"`
	// The type name of the respective entity.
	EntityType EntityType `protobuf:"varint,6,opt,name=entity_type,json=@type,proto3,enum=protolca.commons.EntityType" json:"entity_type,omitempty"`
	// The category of the entity.
	Category *Ref `protobuf:"bytes,7,opt,name=category,proto3" json:"category,omitempty"`
	// A list of optional tags. A tag is just a string which should not contain
	// commas (and other special characters).
	Tags []string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	// If this entity is part of a library, this field contains the identifier of
	// that library. The identifier is typically just the combination of the
	// library name and version.
	Library string `protobuf:"bytes,9,opt,name=library,proto3" json:"library,omitempty"`
	// The scope where the parameter is valid.
	ParameterScope ParameterScope `protobuf:"varint,10,opt,name=parameter_scope,json=parameterScope,proto3,enum=protolca.ParameterScope" json:"parameter_scope,omitempty"`
	// Indicates whether the parameter is an input parameter (true) or a
	// dependent/calculated parameter (false). A parameter can have a formula if
	// it is not an input parameter.
	InputParameter bool `protobuf:"varint,11,opt,name=input_parameter,json=inputParameter,proto3" json:"input_parameter,omitempty"`
	// The parameter value.
	Value float64 `protobuf:"fixed64,12,opt,name=value,proto3" json:"value,omitempty"`
	// A mathematical expression to calculate the parameter value.
	Formula string `protobuf:"bytes,13,opt,name=formula,proto3" json:"formula,omitempty"`
	// An uncertainty distribution of the parameter value. This is only valid for
	// input parameters.
	Uncertainty *Uncertainty `protobuf:"bytes,14,opt,name=uncertainty,proto3" json:"uncertainty,omitempty"`
}

func (x *Parameter) Reset() {
	*x = Parameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Parameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parameter) ProtoMessage() {}

func (x *Parameter) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parameter.ProtoReflect.Descriptor instead.
func (*Parameter) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{24}
}

func (x *Parameter) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Parameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Parameter) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Parameter) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Parameter) GetLastChange() string {
	if x != nil {
		return x.LastChange
	}
	return ""
}

func (x *Parameter) GetEntityType() EntityType {
	if x != nil {
		return x.EntityType
	}
	return EntityType_Undefined
}

func (x *Parameter) GetCategory() *Ref {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Parameter) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Parameter) GetLibrary() string {
	if x != nil {
		return x.Library
	}
	return ""
}

func (x *Parameter) GetParameterScope() ParameterScope {
	if x != nil {
		return x.ParameterScope
	}
	return ParameterScope_UNDEFINED_PARAMETER_SCOPE
}

func (x *Parameter) GetInputParameter() bool {
	if x != nil {
		return x.InputParameter
	}
	return false
}

func (x *Parameter) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Parameter) GetFormula() string {
	if x != nil {
		return x.Formula
	}
	return ""
}

func (x *Parameter) GetUncertainty() *Uncertainty {
	if x != nil {
		return x.Uncertainty
	}
	return nil
}

// A redefinition of a parameter in a product system.
type ParameterRedef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The context of the paramater (a process or LCIA method). If no context is
	// provided it is assumed that this is a redefinition of a global parameter.
	Context *Ref `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	// A description of this parameter redefinition.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The name of the redefined parameter. Note that parameter names are used in
	// formulas so they need to follow specific syntax rules. A redefinition
	// replaces a bound parameter in a specific context and thus has to exactly
	// match the respective name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// An uncertainty distribution for the redefined parameter value.
	Uncertainty *Uncertainty `protobuf:"bytes,4,opt,name=uncertainty,proto3" json:"uncertainty,omitempty"`
	// The value of the redefined parameter.
	Value float64 `protobuf:"fixed64,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ParameterRedef) Reset() {
	*x = ParameterRedef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterRedef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterRedef) ProtoMessage() {}

func (x *ParameterRedef) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterRedef.ProtoReflect.Descriptor instead.
func (*ParameterRedef) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{25}
}

func (x *ParameterRedef) GetContext() *Ref {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ParameterRedef) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ParameterRedef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ParameterRedef) GetUncertainty() *Uncertainty {
	if x != nil {
		return x.Uncertainty
	}
	return nil
}

func (x *ParameterRedef) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// An instance of this class is just a set of parameter redefinitions attached
// to a product system. It can have a name and a description. One of the
// parameter sets can be defined as the baseline of the product system. In the
// calculation the baseline set is then taken by default.
type ParameterRedefSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the parameter set.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A description of the parameter set.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Indicates if this set of parameter redefinitions is the baseline for a
	// product system.
	IsBaseline bool `protobuf:"varint,3,opt,name=is_baseline,json=isBaseline,proto3" json:"is_baseline,omitempty"`
	// The parameter redefinitions of this redefinition set.
	Parameters []*ParameterRedef `protobuf:"bytes,4,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *ParameterRedefSet) Reset() {
	*x = ParameterRedefSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterRedefSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterRedefSet) ProtoMessage() {}

func (x *ParameterRedefSet) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterRedefSet.ProtoReflect.Descriptor instead.
func (*ParameterRedefSet) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{26}
}

func (x *ParameterRedefSet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ParameterRedefSet) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ParameterRedefSet) GetIsBaseline() bool {
	if x != nil {
		return x.IsBaseline
	}
	return false
}

func (x *ParameterRedefSet) GetParameters() []*ParameterRedef {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type Process struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reference ID (typically an UUID) of the entity.
	Id string `protobuf:"bytes,1,opt,name=id,json=@id,proto3" json:"id,omitempty"`
	// The name of the entity.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the entity.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// A version number in MAJOR.MINOR.PATCH format where the MINOR and PATCH
	// fields are optional and the fields may have leading zeros (so 01.00.00 is
	// the same as 1.0.0 or 1).
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// The timestamp when the entity was changed the last time.
	LastChange string `protobuf:"bytes,5,opt,name=last_change,json=lastChange,proto3" json:"last_change,omitempty"`
	// The type name of the respective entity.
	EntityType EntityType `protobuf:"varint,6,opt,name=entity_type,json=@type,proto3,enum=protolca.commons.EntityType" json:"entity_type,omitempty"`
	// The category of the entity.
	Category *Ref `protobuf:"bytes,7,opt,name=category,proto3" json:"category,omitempty"`
	// A list of optional tags. A tag is just a string which should not contain
	// commas (and other special characters).
	Tags []string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	// If this entity is part of a library, this field contains the identifier of
	// that library. The identifier is typically just the combination of the
	// library name and version.
	Library                 string              `protobuf:"bytes,9,opt,name=library,proto3" json:"library,omitempty"`
	AllocationFactors       []*AllocationFactor `protobuf:"bytes,10,rep,name=allocation_factors,json=allocationFactors,proto3" json:"allocation_factors,omitempty"`
	DefaultAllocationMethod AllocationType      `protobuf:"varint,11,opt,name=default_allocation_method,json=defaultAllocationMethod,proto3,enum=protolca.AllocationType" json:"default_allocation_method,omitempty"`
	// The inputs and outputs of the process.
	Exchanges []*Exchange `protobuf:"bytes,12,rep,name=exchanges,proto3" json:"exchanges,omitempty"`
	// This field holds the last internal ID that was used in an exchange (which
	// may have been deleted, so it can be larger than the largest internal ID of
	// the exchanges of the process.) The internal ID of an exchange is used to
	// identify exchanges within a process (for updates, data exchanges (see
	// process links), etc.). When you add an exchange to a process, you should
	// increment this field in the process and set the resulting value as the
	// internal ID of that exchange. The sequence of internal IDs should start
	// with `1`.
	LastInternalId int32 `protobuf:"varint,13,opt,name=last_internal_id,json=lastInternalId,proto3" json:"last_internal_id,omitempty"`
	// The location of the process.
	Location             *Ref                  `protobuf:"bytes,14,opt,name=location,proto3" json:"location,omitempty"`
	Parameters           []*Parameter          `protobuf:"bytes,15,rep,name=parameters,proto3" json:"parameters,omitempty"`
	ProcessDocumentation *ProcessDocumentation `protobuf:"bytes,16,opt,name=process_documentation,json=processDocumentation,proto3" json:"process_documentation,omitempty"`
	ProcessType          ProcessType           `protobuf:"varint,17,opt,name=process_type,json=processType,proto3,enum=protolca.ProcessType" json:"process_type,omitempty"`
	// A reference to a data quality system ([DQSystem]) with which the overall
	// quality of the process can be assessed.
	DqSystem *Ref `protobuf:"bytes,18,opt,name=dq_system,json=dqSystem,proto3" json:"dq_system,omitempty"`
	// A reference to a data quality system ([DQSystem]) with which the quality
	// of individual inputs and outputs ([Exchange]s) of the process can be
	// assessed.
	ExchangeDqSystem *Ref `protobuf:"bytes,19,opt,name=exchange_dq_system,json=exchangeDqSystem,proto3" json:"exchange_dq_system,omitempty"`
	// A reference to a data quality system ([DQSystem]) with which the quality
	// of individual social aspects of the process can be assessed.
	SocialDqSystem *Ref `protobuf:"bytes,20,opt,name=social_dq_system,json=socialDqSystem,proto3" json:"social_dq_system,omitempty"`
	// A data quality entry like `(1;3;2;5;1)`. The entry is a vector of data
	// quality values that need to match the overall data quality system of the
	// process (the system that is stored in the `dqSystem` property). In such a
	// system the data quality indicators have fixed positions and the respective
	// values in the `dqEntry` vector map to these positions.
	DqEntry string `protobuf:"bytes,21,opt,name=dq_entry,json=dqEntry,proto3" json:"dq_entry,omitempty"`
	// Indicates whether this process describes an infrastructure process. This
	// field is part of the openLCA schema because of backward compatibility with
	// EcoSpold 1. It does not really have a meaning in openLCA and should not be
	// used anymore.
	InfrastructureProcess bool `protobuf:"varint,22,opt,name=infrastructure_process,json=infrastructureProcess,proto3" json:"infrastructure_process,omitempty"`
	// A set of social aspects related to this process.
	SocialAspects []*SocialAspect `protobuf:"bytes,23,rep,name=social_aspects,json=socialAspects,proto3" json:"social_aspects,omitempty"`
}

func (x *Process) Reset() {
	*x = Process{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Process) ProtoMessage() {}

func (x *Process) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Process.ProtoReflect.Descriptor instead.
func (*Process) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{27}
}

func (x *Process) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Process) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Process) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Process) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Process) GetLastChange() string {
	if x != nil {
		return x.LastChange
	}
	return ""
}

func (x *Process) GetEntityType() EntityType {
	if x != nil {
		return x.EntityType
	}
	return EntityType_Undefined
}

func (x *Process) GetCategory() *Ref {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Process) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Process) GetLibrary() string {
	if x != nil {
		return x.Library
	}
	return ""
}

func (x *Process) GetAllocationFactors() []*AllocationFactor {
	if x != nil {
		return x.AllocationFactors
	}
	return nil
}

func (x *Process) GetDefaultAllocationMethod() AllocationType {
	if x != nil {
		return x.DefaultAllocationMethod
	}
	return AllocationType_UNDEFINED_ALLOCATION_TYPE
}

func (x *Process) GetExchanges() []*Exchange {
	if x != nil {
		return x.Exchanges
	}
	return nil
}

func (x *Process) GetLastInternalId() int32 {
	if x != nil {
		return x.LastInternalId
	}
	return 0
}

func (x *Process) GetLocation() *Ref {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Process) GetParameters() []*Parameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *Process) GetProcessDocumentation() *ProcessDocumentation {
	if x != nil {
		return x.ProcessDocumentation
	}
	return nil
}

func (x *Process) GetProcessType() ProcessType {
	if x != nil {
		return x.ProcessType
	}
	return ProcessType_UNDEFINED_PROCESS_TYPE
}

func (x *Process) GetDqSystem() *Ref {
	if x != nil {
		return x.DqSystem
	}
	return nil
}

func (x *Process) GetExchangeDqSystem() *Ref {
	if x != nil {
		return x.ExchangeDqSystem
	}
	return nil
}

func (x *Process) GetSocialDqSystem() *Ref {
	if x != nil {
		return x.SocialDqSystem
	}
	return nil
}

func (x *Process) GetDqEntry() string {
	if x != nil {
		return x.DqEntry
	}
	return ""
}

func (x *Process) GetInfrastructureProcess() bool {
	if x != nil {
		return x.InfrastructureProcess
	}
	return false
}

func (x *Process) GetSocialAspects() []*SocialAspect {
	if x != nil {
		return x.SocialAspects
	}
	return nil
}

type ProcessDocumentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeDescription              string `protobuf:"bytes,1,opt,name=time_description,json=timeDescription,proto3" json:"time_description,omitempty"`
	ValidUntil                   string `protobuf:"bytes,2,opt,name=valid_until,json=validUntil,proto3" json:"valid_until,omitempty"`
	ValidFrom                    string `protobuf:"bytes,3,opt,name=valid_from,json=validFrom,proto3" json:"valid_from,omitempty"`
	TechnologyDescription        string `protobuf:"bytes,4,opt,name=technology_description,json=technologyDescription,proto3" json:"technology_description,omitempty"`
	DataCollectionDescription    string `protobuf:"bytes,5,opt,name=data_collection_description,json=dataCollectionDescription,proto3" json:"data_collection_description,omitempty"`
	CompletenessDescription      string `protobuf:"bytes,6,opt,name=completeness_description,json=completenessDescription,proto3" json:"completeness_description,omitempty"`
	DataSelectionDescription     string `protobuf:"bytes,7,opt,name=data_selection_description,json=dataSelectionDescription,proto3" json:"data_selection_description,omitempty"`
	ReviewDetails                string `protobuf:"bytes,8,opt,name=review_details,json=reviewDetails,proto3" json:"review_details,omitempty"`
	DataTreatmentDescription     string `protobuf:"bytes,9,opt,name=data_treatment_description,json=dataTreatmentDescription,proto3" json:"data_treatment_description,omitempty"`
	InventoryMethodDescription   string `protobuf:"bytes,10,opt,name=inventory_method_description,json=inventoryMethodDescription,proto3" json:"inventory_method_description,omitempty"`
	ModelingConstantsDescription string `protobuf:"bytes,11,opt,name=modeling_constants_description,json=modelingConstantsDescription,proto3" json:"modeling_constants_description,omitempty"`
	Reviewer                     *Ref   `protobuf:"bytes,12,opt,name=reviewer,proto3" json:"reviewer,omitempty"`
	SamplingDescription          string `protobuf:"bytes,13,opt,name=sampling_description,json=samplingDescription,proto3" json:"sampling_description,omitempty"`
	Sources                      []*Ref `protobuf:"bytes,14,rep,name=sources,proto3" json:"sources,omitempty"`
	RestrictionsDescription      string `protobuf:"bytes,15,opt,name=restrictions_description,json=restrictionsDescription,proto3" json:"restrictions_description,omitempty"`
	Copyright                    bool   `protobuf:"varint,16,opt,name=copyright,proto3" json:"copyright,omitempty"`
	CreationDate                 string `protobuf:"bytes,17,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	DataDocumentor               *Ref   `protobuf:"bytes,18,opt,name=data_documentor,json=dataDocumentor,proto3" json:"data_documentor,omitempty"`
	DataGenerator                *Ref   `protobuf:"bytes,19,opt,name=data_generator,json=dataGenerator,proto3" json:"data_generator,omitempty"`
	DataSetOwner                 *Ref   `protobuf:"bytes,20,opt,name=data_set_owner,json=dataSetOwner,proto3" json:"data_set_owner,omitempty"`
	IntendedApplication          string `protobuf:"bytes,21,opt,name=intended_application,json=intendedApplication,proto3" json:"intended_application,omitempty"`
	ProjectDescription           string `protobuf:"bytes,22,opt,name=project_description,json=projectDescription,proto3" json:"project_description,omitempty"`
	Publication                  *Ref   `protobuf:"bytes,23,opt,name=publication,proto3" json:"publication,omitempty"`
	GeographyDescription         string `protobuf:"bytes,24,opt,name=geography_description,json=geographyDescription,proto3" json:"geography_description,omitempty"`
}

func (x *ProcessDocumentation) Reset() {
	*x = ProcessDocumentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessDocumentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessDocumentation) ProtoMessage() {}

func (x *ProcessDocumentation) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessDocumentation.ProtoReflect.Descriptor instead.
func (*ProcessDocumentation) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{28}
}

func (x *ProcessDocumentation) GetTimeDescription() string {
	if x != nil {
		return x.TimeDescription
	}
	return ""
}

func (x *ProcessDocumentation) GetValidUntil() string {
	if x != nil {
		return x.ValidUntil
	}
	return ""
}

func (x *ProcessDocumentation) GetValidFrom() string {
	if x != nil {
		return x.ValidFrom
	}
	return ""
}

func (x *ProcessDocumentation) GetTechnologyDescription() string {
	if x != nil {
		return x.TechnologyDescription
	}
	return ""
}

func (x *ProcessDocumentation) GetDataCollectionDescription() string {
	if x != nil {
		return x.DataCollectionDescription
	}
	return ""
}

func (x *ProcessDocumentation) GetCompletenessDescription() string {
	if x != nil {
		return x.CompletenessDescription
	}
	return ""
}

func (x *ProcessDocumentation) GetDataSelectionDescription() string {
	if x != nil {
		return x.DataSelectionDescription
	}
	return ""
}

func (x *ProcessDocumentation) GetReviewDetails() string {
	if x != nil {
		return x.ReviewDetails
	}
	return ""
}

func (x *ProcessDocumentation) GetDataTreatmentDescription() string {
	if x != nil {
		return x.DataTreatmentDescription
	}
	return ""
}

func (x *ProcessDocumentation) GetInventoryMethodDescription() string {
	if x != nil {
		return x.InventoryMethodDescription
	}
	return ""
}

func (x *ProcessDocumentation) GetModelingConstantsDescription() string {
	if x != nil {
		return x.ModelingConstantsDescription
	}
	return ""
}

func (x *ProcessDocumentation) GetReviewer() *Ref {
	if x != nil {
		return x.Reviewer
	}
	return nil
}

func (x *ProcessDocumentation) GetSamplingDescription() string {
	if x != nil {
		return x.SamplingDescription
	}
	return ""
}

func (x *ProcessDocumentation) GetSources() []*Ref {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *ProcessDocumentation) GetRestrictionsDescription() string {
	if x != nil {
		return x.RestrictionsDescription
	}
	return ""
}

func (x *ProcessDocumentation) GetCopyright() bool {
	if x != nil {
		return x.Copyright
	}
	return false
}

func (x *ProcessDocumentation) GetCreationDate() string {
	if x != nil {
		return x.CreationDate
	}
	return ""
}

func (x *ProcessDocumentation) GetDataDocumentor() *Ref {
	if x != nil {
		return x.DataDocumentor
	}
	return nil
}

func (x *ProcessDocumentation) GetDataGenerator() *Ref {
	if x != nil {
		return x.DataGenerator
	}
	return nil
}

func (x *ProcessDocumentation) GetDataSetOwner() *Ref {
	if x != nil {
		return x.DataSetOwner
	}
	return nil
}

func (x *ProcessDocumentation) GetIntendedApplication() string {
	if x != nil {
		return x.IntendedApplication
	}
	return ""
}

func (x *ProcessDocumentation) GetProjectDescription() string {
	if x != nil {
		return x.ProjectDescription
	}
	return ""
}

func (x *ProcessDocumentation) GetPublication() *Ref {
	if x != nil {
		return x.Publication
	}
	return nil
}

func (x *ProcessDocumentation) GetGeographyDescription() string {
	if x != nil {
		return x.GeographyDescription
	}
	return ""
}

// A process link is a connection between two processes in a product system.
type ProcessLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The descriptor of the process or product system that provides a product or
	// a waste treatment.
	Provider *Ref `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	// The descriptor of the flow that is exchanged between the two processes.
	Flow *Ref `protobuf:"bytes,2,opt,name=flow,proto3" json:"flow,omitempty"`
	// The descriptor of the process that is linked to the provider.
	Process *Ref `protobuf:"bytes,3,opt,name=process,proto3" json:"process,omitempty"`
	// The exchange of the linked process (this is useful if the linked process
	// has multiple exchanges with the same flow that are linked to different
	// provides, e.g. in an electricity mix).
	Exchange *ExchangeRef `protobuf:"bytes,4,opt,name=exchange,proto3" json:"exchange,omitempty"`
}

func (x *ProcessLink) Reset() {
	*x = ProcessLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessLink) ProtoMessage() {}

func (x *ProcessLink) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessLink.ProtoReflect.Descriptor instead.
func (*ProcessLink) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{29}
}

func (x *ProcessLink) GetProvider() *Ref {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *ProcessLink) GetFlow() *Ref {
	if x != nil {
		return x.Flow
	}
	return nil
}

func (x *ProcessLink) GetProcess() *Ref {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *ProcessLink) GetExchange() *ExchangeRef {
	if x != nil {
		return x.Exchange
	}
	return nil
}

// A product system describes the supply chain of a product (the functional
// unit) ...
type ProductSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reference ID (typically an UUID) of the entity.
	Id string `protobuf:"bytes,1,opt,name=id,json=@id,proto3" json:"id,omitempty"`
	// The name of the entity.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the entity.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// A version number in MAJOR.MINOR.PATCH format where the MINOR and PATCH
	// fields are optional and the fields may have leading zeros (so 01.00.00 is
	// the same as 1.0.0 or 1).
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// The timestamp when the entity was changed the last time.
	LastChange string `protobuf:"bytes,5,opt,name=last_change,json=lastChange,proto3" json:"last_change,omitempty"`
	// The type name of the respective entity.
	EntityType EntityType `protobuf:"varint,6,opt,name=entity_type,json=@type,proto3,enum=protolca.commons.EntityType" json:"entity_type,omitempty"`
	// The category of the entity.
	Category *Ref `protobuf:"bytes,7,opt,name=category,proto3" json:"category,omitempty"`
	// A list of optional tags. A tag is just a string which should not contain
	// commas (and other special characters).
	Tags []string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	// If this entity is part of a library, this field contains the identifier of
	// that library. The identifier is typically just the combination of the
	// library name and version.
	Library string `protobuf:"bytes,9,opt,name=library,proto3" json:"library,omitempty"`
	// The descriptors of all processes and sub-systems that are contained in the
	// product system.
	Processes []*Ref `protobuf:"bytes,10,rep,name=processes,proto3" json:"processes,omitempty"`
	// The descriptor of the process that provides the flow of the functional
	// unit of the product system.
	ReferenceProcess *Ref `protobuf:"bytes,11,opt,name=reference_process,json=referenceProcess,proto3" json:"reference_process,omitempty"`
	// The exchange of the reference processes (typically the product output)
	// that provides the flow of the functional unit of the product system.
	ReferenceExchange *ExchangeRef `protobuf:"bytes,12,opt,name=reference_exchange,json=referenceExchange,proto3" json:"reference_exchange,omitempty"`
	// The flow amount of the functional unit of the product system.
	TargetAmount float64 `protobuf:"fixed64,13,opt,name=target_amount,json=targetAmount,proto3" json:"target_amount,omitempty"`
	// The unit in which the flow amount of the functional unit is given.
	TargetUnit *Ref `protobuf:"bytes,14,opt,name=target_unit,json=targetUnit,proto3" json:"target_unit,omitempty"`
	// The flow property in which the flow amount of the functional unit is
	// given.
	TargetFlowProperty *Ref `protobuf:"bytes,15,opt,name=target_flow_property,json=targetFlowProperty,proto3" json:"target_flow_property,omitempty"`
	// The process links of the product system.
	ProcessLinks []*ProcessLink `protobuf:"bytes,16,rep,name=process_links,json=processLinks,proto3" json:"process_links,omitempty"`
	// A list of possible sets of parameter redefinitions for this product
	// system.
	ParameterSets []*ParameterRedefSet `protobuf:"bytes,17,rep,name=parameter_sets,json=parameterSets,proto3" json:"parameter_sets,omitempty"`
}

func (x *ProductSystem) Reset() {
	*x = ProductSystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductSystem) ProtoMessage() {}

func (x *ProductSystem) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductSystem.ProtoReflect.Descriptor instead.
func (*ProductSystem) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{30}
}

func (x *ProductSystem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProductSystem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductSystem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProductSystem) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ProductSystem) GetLastChange() string {
	if x != nil {
		return x.LastChange
	}
	return ""
}

func (x *ProductSystem) GetEntityType() EntityType {
	if x != nil {
		return x.EntityType
	}
	return EntityType_Undefined
}

func (x *ProductSystem) GetCategory() *Ref {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *ProductSystem) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ProductSystem) GetLibrary() string {
	if x != nil {
		return x.Library
	}
	return ""
}

func (x *ProductSystem) GetProcesses() []*Ref {
	if x != nil {
		return x.Processes
	}
	return nil
}

func (x *ProductSystem) GetReferenceProcess() *Ref {
	if x != nil {
		return x.ReferenceProcess
	}
	return nil
}

func (x *ProductSystem) GetReferenceExchange() *ExchangeRef {
	if x != nil {
		return x.ReferenceExchange
	}
	return nil
}

func (x *ProductSystem) GetTargetAmount() float64 {
	if x != nil {
		return x.TargetAmount
	}
	return 0
}

func (x *ProductSystem) GetTargetUnit() *Ref {
	if x != nil {
		return x.TargetUnit
	}
	return nil
}

func (x *ProductSystem) GetTargetFlowProperty() *Ref {
	if x != nil {
		return x.TargetFlowProperty
	}
	return nil
}

func (x *ProductSystem) GetProcessLinks() []*ProcessLink {
	if x != nil {
		return x.ProcessLinks
	}
	return nil
}

func (x *ProductSystem) GetParameterSets() []*ParameterRedefSet {
	if x != nil {
		return x.ParameterSets
	}
	return nil
}

type Project struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reference ID (typically an UUID) of the entity.
	Id string `protobuf:"bytes,1,opt,name=id,json=@id,proto3" json:"id,omitempty"`
	// The name of the entity.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the entity.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// A version number in MAJOR.MINOR.PATCH format where the MINOR and PATCH
	// fields are optional and the fields may have leading zeros (so 01.00.00 is
	// the same as 1.0.0 or 1).
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// The timestamp when the entity was changed the last time.
	LastChange string `protobuf:"bytes,5,opt,name=last_change,json=lastChange,proto3" json:"last_change,omitempty"`
	// The type name of the respective entity.
	EntityType EntityType `protobuf:"varint,6,opt,name=entity_type,json=@type,proto3,enum=protolca.commons.EntityType" json:"entity_type,omitempty"`
	// The category of the entity.
	Category *Ref `protobuf:"bytes,7,opt,name=category,proto3" json:"category,omitempty"`
	// A list of optional tags. A tag is just a string which should not contain
	// commas (and other special characters).
	Tags []string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	// If this entity is part of a library, this field contains the identifier of
	// that library. The identifier is typically just the combination of the
	// library name and version.
	Library      string `protobuf:"bytes,9,opt,name=library,proto3" json:"library,omitempty"`
	ImpactMethod *Ref   `protobuf:"bytes,10,opt,name=impact_method,json=impactMethod,proto3" json:"impact_method,omitempty"`
	NwSet        *NwSet `protobuf:"bytes,11,opt,name=nw_set,json=nwSet,proto3" json:"nw_set,omitempty"`
}

func (x *Project) Reset() {
	*x = Project{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{31}
}

func (x *Project) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Project) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Project) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Project) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Project) GetLastChange() string {
	if x != nil {
		return x.LastChange
	}
	return ""
}

func (x *Project) GetEntityType() EntityType {
	if x != nil {
		return x.EntityType
	}
	return EntityType_Undefined
}

func (x *Project) GetCategory() *Ref {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Project) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Project) GetLibrary() string {
	if x != nil {
		return x.Library
	}
	return ""
}

func (x *Project) GetImpactMethod() *Ref {
	if x != nil {
		return x.ImpactMethod
	}
	return nil
}

func (x *Project) GetNwSet() *NwSet {
	if x != nil {
		return x.NwSet
	}
	return nil
}

// A Ref is a reference to a [RootEntity]. When serializing an entity (e.g. a
// [Process]) that references another standalone entity (e.g. a [Flow] in an
// [Exchange]) we do not want to write the complete referenced entity into the
// serialized JSON object but just a reference. However, the reference contains
// some meta-data like name, category path etc. that are useful to display.
type Ref struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reference ID (typically an UUID) of the entity.
	Id string `protobuf:"bytes,1,opt,name=id,json=@id,proto3" json:"id,omitempty"`
	// The name of the entity.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the entity.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// A version number in MAJOR.MINOR.PATCH format where the MINOR and PATCH
	// fields are optional and the fields may have leading zeros (so 01.00.00 is
	// the same as 1.0.0 or 1).
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// The timestamp when the entity was changed the last time.
	LastChange string `protobuf:"bytes,5,opt,name=last_change,json=lastChange,proto3" json:"last_change,omitempty"`
	// The type name of the respective entity.
	EntityType EntityType `protobuf:"varint,6,opt,name=entity_type,json=@type,proto3,enum=protolca.commons.EntityType" json:"entity_type,omitempty"`
	// The full path of the category of the referenced entity from top to bottom,
	// e.g. `"Elementary flows", "Emissions to air", "unspecified"`.
	CategoryPath []string `protobuf:"bytes,7,rep,name=category_path,json=categoryPath,proto3" json:"category_path,omitempty"`
	// If the entity that is described by this reference is part of a library,
	// this field contains the identifier of that library. The identifier is
	// typically just the combination of the library name and version.
	Library string `protobuf:"bytes,8,opt,name=library,proto3" json:"library,omitempty"`
	// This field is only valid for references of flows or impact categories and
	// contains the name (symbol) of the reference unit of that respective flow
	// or impact category.
	RefUnit string `protobuf:"bytes,9,opt,name=ref_unit,json=refUnit,proto3" json:"ref_unit,omitempty"`
	// This field is only valid for references of processes or flows and contains
	// the location name or code of that respective process or flow.
	Location string `protobuf:"bytes,10,opt,name=location,proto3" json:"location,omitempty"`
	// In case of a reference to a flow, this field can contain the type of flow
	// that is referenced.
	FlowType FlowType `protobuf:"varint,11,opt,name=flow_type,json=flowType,proto3,enum=protolca.FlowType" json:"flow_type,omitempty"`
	// In case of a reference to a process, this fiel can contain the type of
	// process that is referenced.
	ProcessType ProcessType `protobuf:"varint,12,opt,name=process_type,json=processType,proto3,enum=protolca.ProcessType" json:"process_type,omitempty"`
}

func (x *Ref) Reset() {
	*x = Ref{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ref) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ref) ProtoMessage() {}

func (x *Ref) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ref.ProtoReflect.Descriptor instead.
func (*Ref) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{32}
}

func (x *Ref) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Ref) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Ref) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Ref) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Ref) GetLastChange() string {
	if x != nil {
		return x.LastChange
	}
	return ""
}

func (x *Ref) GetEntityType() EntityType {
	if x != nil {
		return x.EntityType
	}
	return EntityType_Undefined
}

func (x *Ref) GetCategoryPath() []string {
	if x != nil {
		return x.CategoryPath
	}
	return nil
}

func (x *Ref) GetLibrary() string {
	if x != nil {
		return x.Library
	}
	return ""
}

func (x *Ref) GetRefUnit() string {
	if x != nil {
		return x.RefUnit
	}
	return ""
}

func (x *Ref) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Ref) GetFlowType() FlowType {
	if x != nil {
		return x.FlowType
	}
	return FlowType_UNDEFINED_FLOW_TYPE
}

func (x *Ref) GetProcessType() ProcessType {
	if x != nil {
		return x.ProcessType
	}
	return ProcessType_UNDEFINED_PROCESS_TYPE
}

type SimpleResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowResults   []*FlowResult   `protobuf:"bytes,1,rep,name=flow_results,json=flowResults,proto3" json:"flow_results,omitempty"`
	ImpactResults []*ImpactResult `protobuf:"bytes,2,rep,name=impact_results,json=impactResults,proto3" json:"impact_results,omitempty"`
}

func (x *SimpleResult) Reset() {
	*x = SimpleResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleResult) ProtoMessage() {}

func (x *SimpleResult) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleResult.ProtoReflect.Descriptor instead.
func (*SimpleResult) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{33}
}

func (x *SimpleResult) GetFlowResults() []*FlowResult {
	if x != nil {
		return x.FlowResults
	}
	return nil
}

func (x *SimpleResult) GetImpactResults() []*ImpactResult {
	if x != nil {
		return x.ImpactResults
	}
	return nil
}

// An instance of this class describes a social aspect related to a social
// indicator in a process.
type SocialAspect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The value of the activity variable of the related indicator.
	ActivityValue float64 `protobuf:"fixed64,1,opt,name=activity_value,json=activityValue,proto3" json:"activity_value,omitempty"`
	Comment       string  `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	// A data quality entry, e.g. `(3,1,2,4,1)`.
	Quality string `protobuf:"bytes,3,opt,name=quality,proto3" json:"quality,omitempty"`
	// The raw amount of the indicator's unit of measurement (not required to be
	// numeric currently)
	RawAmount       string    `protobuf:"bytes,4,opt,name=raw_amount,json=rawAmount,proto3" json:"raw_amount,omitempty"`
	RiskLevel       RiskLevel `protobuf:"varint,5,opt,name=risk_level,json=riskLevel,proto3,enum=protolca.RiskLevel" json:"risk_level,omitempty"`
	SocialIndicator *Ref      `protobuf:"bytes,6,opt,name=social_indicator,json=socialIndicator,proto3" json:"social_indicator,omitempty"`
	Source          *Ref      `protobuf:"bytes,7,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *SocialAspect) Reset() {
	*x = SocialAspect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocialAspect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocialAspect) ProtoMessage() {}

func (x *SocialAspect) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocialAspect.ProtoReflect.Descriptor instead.
func (*SocialAspect) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{34}
}

func (x *SocialAspect) GetActivityValue() float64 {
	if x != nil {
		return x.ActivityValue
	}
	return 0
}

func (x *SocialAspect) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *SocialAspect) GetQuality() string {
	if x != nil {
		return x.Quality
	}
	return ""
}

func (x *SocialAspect) GetRawAmount() string {
	if x != nil {
		return x.RawAmount
	}
	return ""
}

func (x *SocialAspect) GetRiskLevel() RiskLevel {
	if x != nil {
		return x.RiskLevel
	}
	return RiskLevel_UNDEFINED_RISK_LEVEL
}

func (x *SocialAspect) GetSocialIndicator() *Ref {
	if x != nil {
		return x.SocialIndicator
	}
	return nil
}

func (x *SocialAspect) GetSource() *Ref {
	if x != nil {
		return x.Source
	}
	return nil
}

type SocialIndicator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reference ID (typically an UUID) of the entity.
	Id string `protobuf:"bytes,1,opt,name=id,json=@id,proto3" json:"id,omitempty"`
	// The name of the entity.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the entity.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// A version number in MAJOR.MINOR.PATCH format where the MINOR and PATCH
	// fields are optional and the fields may have leading zeros (so 01.00.00 is
	// the same as 1.0.0 or 1).
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// The timestamp when the entity was changed the last time.
	LastChange string `protobuf:"bytes,5,opt,name=last_change,json=lastChange,proto3" json:"last_change,omitempty"`
	// The type name of the respective entity.
	EntityType EntityType `protobuf:"varint,6,opt,name=entity_type,json=@type,proto3,enum=protolca.commons.EntityType" json:"entity_type,omitempty"`
	// The category of the entity.
	Category *Ref `protobuf:"bytes,7,opt,name=category,proto3" json:"category,omitempty"`
	// A list of optional tags. A tag is just a string which should not contain
	// commas (and other special characters).
	Tags []string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	// If this entity is part of a library, this field contains the identifier of
	// that library. The identifier is typically just the combination of the
	// library name and version.
	Library string `protobuf:"bytes,9,opt,name=library,proto3" json:"library,omitempty"`
	// The name of the activity variable of the indicator.
	ActivityVariable string `protobuf:"bytes,10,opt,name=activity_variable,json=activityVariable,proto3" json:"activity_variable,omitempty"`
	// The quantity of the activity variable.
	ActivityQuantity *Ref `protobuf:"bytes,11,opt,name=activity_quantity,json=activityQuantity,proto3" json:"activity_quantity,omitempty"`
	// The unit of the activity variable.
	ActivityUnit *Ref `protobuf:"bytes,12,opt,name=activity_unit,json=activityUnit,proto3" json:"activity_unit,omitempty"`
	// The unit in which the indicator is measured.
	UnitOfMeasurement string `protobuf:"bytes,13,opt,name=unit_of_measurement,json=unitOfMeasurement,proto3" json:"unit_of_measurement,omitempty"`
	// Documentation of the evaluation scheme of the indicator.
	EvaluationScheme string `protobuf:"bytes,14,opt,name=evaluation_scheme,json=evaluationScheme,proto3" json:"evaluation_scheme,omitempty"`
}

func (x *SocialIndicator) Reset() {
	*x = SocialIndicator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocialIndicator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocialIndicator) ProtoMessage() {}

func (x *SocialIndicator) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocialIndicator.ProtoReflect.Descriptor instead.
func (*SocialIndicator) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{35}
}

func (x *SocialIndicator) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SocialIndicator) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SocialIndicator) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SocialIndicator) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SocialIndicator) GetLastChange() string {
	if x != nil {
		return x.LastChange
	}
	return ""
}

func (x *SocialIndicator) GetEntityType() EntityType {
	if x != nil {
		return x.EntityType
	}
	return EntityType_Undefined
}

func (x *SocialIndicator) GetCategory() *Ref {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *SocialIndicator) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *SocialIndicator) GetLibrary() string {
	if x != nil {
		return x.Library
	}
	return ""
}

func (x *SocialIndicator) GetActivityVariable() string {
	if x != nil {
		return x.ActivityVariable
	}
	return ""
}

func (x *SocialIndicator) GetActivityQuantity() *Ref {
	if x != nil {
		return x.ActivityQuantity
	}
	return nil
}

func (x *SocialIndicator) GetActivityUnit() *Ref {
	if x != nil {
		return x.ActivityUnit
	}
	return nil
}

func (x *SocialIndicator) GetUnitOfMeasurement() string {
	if x != nil {
		return x.UnitOfMeasurement
	}
	return ""
}

func (x *SocialIndicator) GetEvaluationScheme() string {
	if x != nil {
		return x.EvaluationScheme
	}
	return ""
}

// A source is a literature reference.
type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reference ID (typically an UUID) of the entity.
	Id string `protobuf:"bytes,1,opt,name=id,json=@id,proto3" json:"id,omitempty"`
	// The name of the entity.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the entity.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// A version number in MAJOR.MINOR.PATCH format where the MINOR and PATCH
	// fields are optional and the fields may have leading zeros (so 01.00.00 is
	// the same as 1.0.0 or 1).
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// The timestamp when the entity was changed the last time.
	LastChange string `protobuf:"bytes,5,opt,name=last_change,json=lastChange,proto3" json:"last_change,omitempty"`
	// The type name of the respective entity.
	EntityType EntityType `protobuf:"varint,6,opt,name=entity_type,json=@type,proto3,enum=protolca.commons.EntityType" json:"entity_type,omitempty"`
	// The category of the entity.
	Category *Ref `protobuf:"bytes,7,opt,name=category,proto3" json:"category,omitempty"`
	// A list of optional tags. A tag is just a string which should not contain
	// commas (and other special characters).
	Tags []string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	// If this entity is part of a library, this field contains the identifier of
	// that library. The identifier is typically just the combination of the
	// library name and version.
	Library string `protobuf:"bytes,9,opt,name=library,proto3" json:"library,omitempty"`
	// A URL that points to the source.
	Url string `protobuf:"bytes,10,opt,name=url,proto3" json:"url,omitempty"`
	// The full text reference of the source.
	TextReference string `protobuf:"bytes,11,opt,name=text_reference,json=textReference,proto3" json:"text_reference,omitempty"`
	// The publication year of the source.
	Year int32 `protobuf:"varint,12,opt,name=year,proto3" json:"year,omitempty"`
	// A direct link (relative or absolute URL) to the source file.
	ExternalFile string `protobuf:"bytes,13,opt,name=external_file,json=externalFile,proto3" json:"external_file,omitempty"`
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{36}
}

func (x *Source) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Source) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Source) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Source) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Source) GetLastChange() string {
	if x != nil {
		return x.LastChange
	}
	return ""
}

func (x *Source) GetEntityType() EntityType {
	if x != nil {
		return x.EntityType
	}
	return EntityType_Undefined
}

func (x *Source) GetCategory() *Ref {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Source) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Source) GetLibrary() string {
	if x != nil {
		return x.Library
	}
	return ""
}

func (x *Source) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Source) GetTextReference() string {
	if x != nil {
		return x.TextReference
	}
	return ""
}

func (x *Source) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *Source) GetExternalFile() string {
	if x != nil {
		return x.ExternalFile
	}
	return ""
}

// Defines the parameter values of an uncertainty distribution. Depending on
// the uncertainty distribution type different parameters could be used.
type Uncertainty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The uncertainty distribution type
	DistributionType UncertaintyType `protobuf:"varint,1,opt,name=distribution_type,json=distributionType,proto3,enum=protolca.UncertaintyType" json:"distribution_type,omitempty"`
	// The arithmetic mean (used for normal distributions).
	Mean float64 `protobuf:"fixed64,2,opt,name=mean,proto3" json:"mean,omitempty"`
	// A mathematical formula for the arithmetic mean.
	MeanFormula string `protobuf:"bytes,3,opt,name=mean_formula,json=meanFormula,proto3" json:"mean_formula,omitempty"`
	// The geometric mean value (used for log-normal distributions).
	GeomMean float64 `protobuf:"fixed64,4,opt,name=geom_mean,json=geomMean,proto3" json:"geom_mean,omitempty"`
	// A mathematical formula for the geometric mean.
	GeomMeanFormula string `protobuf:"bytes,5,opt,name=geom_mean_formula,json=geomMeanFormula,proto3" json:"geom_mean_formula,omitempty"`
	// The minimum value (used for uniform and triangle distributions).
	Minimum float64 `protobuf:"fixed64,6,opt,name=minimum,proto3" json:"minimum,omitempty"`
	// A mathematical formula for the minimum value.
	MinimumFormula string `protobuf:"bytes,7,opt,name=minimum_formula,json=minimumFormula,proto3" json:"minimum_formula,omitempty"`
	// The arithmetic standard deviation (used for normal distributions).
	Sd float64 `protobuf:"fixed64,8,opt,name=sd,proto3" json:"sd,omitempty"`
	// A mathematical formula for the arithmetic standard deviation.
	SdFormula string `protobuf:"bytes,9,opt,name=sd_formula,json=sdFormula,proto3" json:"sd_formula,omitempty"`
	// The geometric standard deviation (used for log-normal distributions).
	GeomSd float64 `protobuf:"fixed64,10,opt,name=geom_sd,json=geomSd,proto3" json:"geom_sd,omitempty"`
	// A mathematical formula for the geometric standard deviation.
	GeomSdFormula string `protobuf:"bytes,11,opt,name=geom_sd_formula,json=geomSdFormula,proto3" json:"geom_sd_formula,omitempty"`
	// The most likely value (used for triangle distributions).
	Mode float64 `protobuf:"fixed64,12,opt,name=mode,proto3" json:"mode,omitempty"`
	// A mathematical formula for the most likely value.
	ModeFormula string `protobuf:"bytes,13,opt,name=mode_formula,json=modeFormula,proto3" json:"mode_formula,omitempty"`
	// The maximum value (used for uniform and triangle distributions).
	Maximum float64 `protobuf:"fixed64,14,opt,name=maximum,proto3" json:"maximum,omitempty"`
	// A mathematical formula for the maximum value.
	MaximumFormula string `protobuf:"bytes,15,opt,name=maximum_formula,json=maximumFormula,proto3" json:"maximum_formula,omitempty"`
}

func (x *Uncertainty) Reset() {
	*x = Uncertainty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uncertainty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uncertainty) ProtoMessage() {}

func (x *Uncertainty) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uncertainty.ProtoReflect.Descriptor instead.
func (*Uncertainty) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{37}
}

func (x *Uncertainty) GetDistributionType() UncertaintyType {
	if x != nil {
		return x.DistributionType
	}
	return UncertaintyType_UNDEFINED_UNCERTAINTY_TYPE
}

func (x *Uncertainty) GetMean() float64 {
	if x != nil {
		return x.Mean
	}
	return 0
}

func (x *Uncertainty) GetMeanFormula() string {
	if x != nil {
		return x.MeanFormula
	}
	return ""
}

func (x *Uncertainty) GetGeomMean() float64 {
	if x != nil {
		return x.GeomMean
	}
	return 0
}

func (x *Uncertainty) GetGeomMeanFormula() string {
	if x != nil {
		return x.GeomMeanFormula
	}
	return ""
}

func (x *Uncertainty) GetMinimum() float64 {
	if x != nil {
		return x.Minimum
	}
	return 0
}

func (x *Uncertainty) GetMinimumFormula() string {
	if x != nil {
		return x.MinimumFormula
	}
	return ""
}

func (x *Uncertainty) GetSd() float64 {
	if x != nil {
		return x.Sd
	}
	return 0
}

func (x *Uncertainty) GetSdFormula() string {
	if x != nil {
		return x.SdFormula
	}
	return ""
}

func (x *Uncertainty) GetGeomSd() float64 {
	if x != nil {
		return x.GeomSd
	}
	return 0
}

func (x *Uncertainty) GetGeomSdFormula() string {
	if x != nil {
		return x.GeomSdFormula
	}
	return ""
}

func (x *Uncertainty) GetMode() float64 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *Uncertainty) GetModeFormula() string {
	if x != nil {
		return x.ModeFormula
	}
	return ""
}

func (x *Uncertainty) GetMaximum() float64 {
	if x != nil {
		return x.Maximum
	}
	return 0
}

func (x *Uncertainty) GetMaximumFormula() string {
	if x != nil {
		return x.MaximumFormula
	}
	return ""
}

// An unit of measure
type Unit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reference ID (typically an UUID) of the entity.
	Id string `protobuf:"bytes,1,opt,name=id,json=@id,proto3" json:"id,omitempty"`
	// The name of the entity.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the entity.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// A version number in MAJOR.MINOR.PATCH format where the MINOR and PATCH
	// fields are optional and the fields may have leading zeros (so 01.00.00 is
	// the same as 1.0.0 or 1).
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// The timestamp when the entity was changed the last time.
	LastChange string `protobuf:"bytes,5,opt,name=last_change,json=lastChange,proto3" json:"last_change,omitempty"`
	// The conversion factor to the reference unit of the unit group to which
	// this unit belongs.
	ConversionFactor float64 `protobuf:"fixed64,6,opt,name=conversion_factor,json=conversionFactor,proto3" json:"conversion_factor,omitempty"`
	// Indicates whether the unit is the reference unit of the unit group to
	// which this unit belongs. If it is the reference unit the conversion factor
	// must be 1.0. There should be always only one reference unit in a unit
	// group. The reference unit is used to convert amounts given in one unit to
	// amounts given in another unit of the respective unit group.
	ReferenceUnit bool `protobuf:"varint,7,opt,name=reference_unit,json=referenceUnit,proto3" json:"reference_unit,omitempty"`
	// A list of synonyms for the unit.
	Synonyms []string `protobuf:"bytes,8,rep,name=synonyms,proto3" json:"synonyms,omitempty"`
}

func (x *Unit) Reset() {
	*x = Unit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Unit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unit) ProtoMessage() {}

func (x *Unit) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unit.ProtoReflect.Descriptor instead.
func (*Unit) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{38}
}

func (x *Unit) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Unit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Unit) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Unit) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Unit) GetLastChange() string {
	if x != nil {
		return x.LastChange
	}
	return ""
}

func (x *Unit) GetConversionFactor() float64 {
	if x != nil {
		return x.ConversionFactor
	}
	return 0
}

func (x *Unit) GetReferenceUnit() bool {
	if x != nil {
		return x.ReferenceUnit
	}
	return false
}

func (x *Unit) GetSynonyms() []string {
	if x != nil {
		return x.Synonyms
	}
	return nil
}

// A group of units that can be converted into each other.
type UnitGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reference ID (typically an UUID) of the entity.
	Id string `protobuf:"bytes,1,opt,name=id,json=@id,proto3" json:"id,omitempty"`
	// The name of the entity.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the entity.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// A version number in MAJOR.MINOR.PATCH format where the MINOR and PATCH
	// fields are optional and the fields may have leading zeros (so 01.00.00 is
	// the same as 1.0.0 or 1).
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// The timestamp when the entity was changed the last time.
	LastChange string `protobuf:"bytes,5,opt,name=last_change,json=lastChange,proto3" json:"last_change,omitempty"`
	// The type name of the respective entity.
	EntityType EntityType `protobuf:"varint,6,opt,name=entity_type,json=@type,proto3,enum=protolca.commons.EntityType" json:"entity_type,omitempty"`
	// The category of the entity.
	Category *Ref `protobuf:"bytes,7,opt,name=category,proto3" json:"category,omitempty"`
	// A list of optional tags. A tag is just a string which should not contain
	// commas (and other special characters).
	Tags []string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	// If this entity is part of a library, this field contains the identifier of
	// that library. The identifier is typically just the combination of the
	// library name and version.
	Library string `protobuf:"bytes,9,opt,name=library,proto3" json:"library,omitempty"`
	// Some LCA data formats do not have the concept of flow properties or
	// quantities. This field provides a default link to a flow property for
	// units that are contained in this group.
	DefaultFlowProperty *Ref `protobuf:"bytes,10,opt,name=default_flow_property,json=defaultFlowProperty,proto3" json:"default_flow_property,omitempty"`
	// The units of the unit group.
	Units []*Unit `protobuf:"bytes,11,rep,name=units,proto3" json:"units,omitempty"`
}

func (x *UnitGroup) Reset() {
	*x = UnitGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_olca_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnitGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitGroup) ProtoMessage() {}

func (x *UnitGroup) ProtoReflect() protoreflect.Message {
	mi := &file_olca_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitGroup.ProtoReflect.Descriptor instead.
func (*UnitGroup) Descriptor() ([]byte, []int) {
	return file_olca_proto_rawDescGZIP(), []int{39}
}

func (x *UnitGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UnitGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UnitGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UnitGroup) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UnitGroup) GetLastChange() string {
	if x != nil {
		return x.LastChange
	}
	return ""
}

func (x *UnitGroup) GetEntityType() EntityType {
	if x != nil {
		return x.EntityType
	}
	return EntityType_Undefined
}

func (x *UnitGroup) GetCategory() *Ref {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *UnitGroup) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UnitGroup) GetLibrary() string {
	if x != nil {
		return x.Library
	}
	return ""
}

func (x *UnitGroup) GetDefaultFlowProperty() *Ref {
	if x != nil {
		return x.DefaultFlowProperty
	}
	return nil
}

func (x *UnitGroup) GetUnits() []*Unit {
	if x != nil {
		return x.Units
	}
	return nil
}

var File_olca_proto protoreflect.FileDescriptor

var file_olca_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x1a, 0x11, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe7, 0x03, 0x0a, 0x05, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x0f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x40, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x40, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x29, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x66, 0x61,
	0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x66, 0x61, 0x78,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x7a, 0x69, 0x70, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x7a, 0x69, 0x70, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x10, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6f, 0x72,
	0x6d, 0x75, 0x6c, 0x61, 0x12, 0x31, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63,
	0x61, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xec, 0x04, 0x0a, 0x10, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x12, 0x44, 0x0a, 0x10,
	0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63,
	0x61, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x34, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x27, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x32, 0x0a, 0x0d, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x0c, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x24, 0x0a, 0x06, 0x6e, 0x77, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61,
	0x2e, 0x52, 0x65, 0x66, 0x52, 0x05, 0x6e, 0x77, 0x53, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x64, 0x65, 0x66, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x31,
	0x0a, 0x14, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x77, 0x69,
	0x74, 0x68, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x0d,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52,
	0x65, 0x66, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x75,
	0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x52, 0x75, 0x6e, 0x73, 0x22, 0xd3, 0x02, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x0f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x40, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x40, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x29, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9e, 0x03, 0x0a,
	0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x0f, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x40, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x40, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c,
	0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x3c, 0x0a, 0x12, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x11, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x68, 0x0a,
	0x0b, 0x44, 0x51, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x06,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x44, 0x51, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52,
	0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x22, 0x7f, 0x0a, 0x07, 0x44, 0x51, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x74,
	0x61, 0x69, 0x6e, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x75, 0x6e, 0x63,
	0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x22, 0xaa, 0x03, 0x0a, 0x08, 0x44, 0x51, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x0f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x40, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x40, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x29, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52,
	0x65, 0x66, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x68, 0x61,
	0x73, 0x5f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x68, 0x61, 0x73, 0x55, 0x6e, 0x63, 0x65, 0x72, 0x74,
	0x61, 0x69, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c,
	0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x35,
	0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x44, 0x51,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x22, 0xa2, 0x05, 0x0a, 0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x76, 0x6f, 0x69, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x76, 0x6f,
	0x69, 0x64, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x66, 0x6c, 0x6f,
	0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c,
	0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x32, 0x0a, 0x0d,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52,
	0x65, 0x66, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x35, 0x0a, 0x16, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x63,
	0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65,
	0x66, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x71, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x71, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x37, 0x0a, 0x0b, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e,
	0x55, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x52, 0x0b, 0x75, 0x6e, 0x63,
	0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2e, 0x0a, 0x0b, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x66, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x22, 0xb7, 0x04, 0x0a, 0x04, 0x46,
	0x6c, 0x6f, 0x77, 0x12, 0x0f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x40, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x40, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x29, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x61, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x61, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12, 0x45, 0x0a, 0x0f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0e, 0x66, 0x6c,
	0x6f, 0x77, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x46, 0x6c, 0x6f, 0x77, 0x22, 0x8d, 0x02, 0x0a, 0x07, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x70,
	0x12, 0x0f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x40, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65,
	0x66, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x32, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x0c, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x66, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x24, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x52, 0x65,
	0x66, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x22, 0xb1, 0x01, 0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x52, 0x65,
	0x66, 0x12, 0x21, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x04,
	0x66, 0x6c, 0x6f, 0x77, 0x12, 0x32, 0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x77,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63,
	0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x29, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x9b, 0x03, 0x0a, 0x0c, 0x46, 0x6c, 0x6f, 0x77, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x0f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x40, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c,
	0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x40, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61,
	0x2e, 0x52, 0x65, 0x66, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x12,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x6c, 0x63, 0x61, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x22, 0xad, 0x01, 0x0a, 0x12, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x0d, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65,
	0x66, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12,
	0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x17,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x22, 0x86, 0x01, 0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66,
	0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e,
	0x52, 0x65, 0x66, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc9, 0x03,
	0x0a, 0x0e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x0f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x40, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c,
	0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x40, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x0e, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x49, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x9c, 0x02, 0x0a, 0x0c, 0x49, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x04, 0x66, 0x6c,
	0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x29, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x0c,
	0x66, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12,
	0x37, 0x0a, 0x0b, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e,
	0x55, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x52, 0x0b, 0x75, 0x6e, 0x63,
	0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x22, 0x89, 0x03, 0x0a, 0x0c, 0x49, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0f, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x40, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x40, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c,
	0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x3a,
	0x0a, 0x11, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x10, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x6e, 0x77,
	0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x4e, 0x77, 0x53, 0x65, 0x74, 0x52, 0x06, 0x6e, 0x77,
	0x53, 0x65, 0x74, 0x73, 0x22, 0x5c, 0x0a, 0x0c, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x36, 0x0a, 0x0f, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x0e, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x94, 0x03, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x40, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x38, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x40, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x67, 0x65, 0x6f, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x08, 0x4e, 0x77,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x0f, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x0e,
	0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x31,
	0x0a, 0x14, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x6e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xe7, 0x01, 0x0a,
	0x05, 0x4e, 0x77, 0x53, 0x65, 0x74, 0x12, 0x0f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x40, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x4e, 0x77, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0xf5, 0x03, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x12, 0x0f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x40, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x40, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x29, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65,
	0x66, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x0f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0e, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12, 0x37, 0x0a, 0x0b, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61,
	0x69, 0x6e, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x55, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74,
	0x79, 0x52, 0x0b, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x22, 0xbe,
	0x01, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x64, 0x65,
	0x66, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65,
	0x66, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x37, 0x0a, 0x0b, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61,
	0x2e, 0x55, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x52, 0x0b, 0x75, 0x6e,
	0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xa4, 0x01, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x64,
	0x65, 0x66, 0x53, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x42, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x0a,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x64, 0x65, 0x66, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xbd, 0x08, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x0f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x40, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x40, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x49, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x54, 0x0a, 0x19, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61,
	0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x17, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x09, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63,
	0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x33, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x53, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x09, 0x64, 0x71, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63,
	0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x08, 0x64, 0x71, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x3b, 0x0a, 0x12, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x71, 0x5f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x10, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x44, 0x71, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x37, 0x0a, 0x10,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x71, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63,
	0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x0e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x71, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x71, 0x5f, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x71, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x35, 0x0a, 0x16, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x0e, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x41, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x0d, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x41,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x22, 0xd0, 0x09, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x29, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x35, 0x0a, 0x16, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3e, 0x0a, 0x1b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x39, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x73,
	0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x1a,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x18, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x64, 0x61, 0x74, 0x61, 0x54, 0x72, 0x65, 0x61, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x40, 0x0a, 0x1c, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x44, 0x0a, 0x1e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x65, 0x72, 0x12, 0x31, 0x0a, 0x14, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63,
	0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x39,
	0x0a, 0x18, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x70,
	0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f,
	0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x0f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61,
	0x2e, 0x52, 0x65, 0x66, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x0d, 0x64, 0x61, 0x74,
	0x61, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x0e, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65,
	0x66, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x31, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x15, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb7, 0x01, 0x0a, 0x0b, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x29, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65,
	0x66, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x27, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x31, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x22, 0xe9, 0x05, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x0f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x40, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x40, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x29, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52,
	0x65, 0x66, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65,
	0x66, 0x52, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x44, 0x0a, 0x12, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x66, 0x52, 0x11, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e,
	0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52,
	0x65, 0x66, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x3f,
	0x0a, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x12, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12,
	0x3a, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63,
	0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0c, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x64, 0x65, 0x66, 0x53, 0x65, 0x74,
	0x52, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x22,
	0xfa, 0x02, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0f, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x40, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x38, 0x0a,
	0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x05, 0x40, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x12, 0x32, 0x0a, 0x0d, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c,
	0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x0c, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x6e, 0x77, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e,
	0x4e, 0x77, 0x53, 0x65, 0x74, 0x52, 0x05, 0x6e, 0x77, 0x53, 0x65, 0x74, 0x22, 0xa2, 0x03, 0x0a,
	0x03, 0x52, 0x65, 0x66, 0x12, 0x0f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x40, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x40, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x65, 0x66, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66,
	0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x86, 0x01, 0x0a, 0x0c, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x37, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x6c, 0x63, 0x61, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b,
	0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x0e, 0x69,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x49,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x69, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x9d, 0x02, 0x0a, 0x0c, 0x53,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x73, 0x70, 0x65, 0x63, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x61, 0x77, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x09,
	0x72, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x10, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52,
	0x65, 0x66, 0x52, 0x0f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52,
	0x65, 0x66, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xa0, 0x04, 0x0a, 0x0f, 0x53,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0f,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x40, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x38, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x40, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x3a, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x0d,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52,
	0x65, 0x66, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x2e, 0x0a, 0x13, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x75,
	0x6e, 0x69, 0x74, 0x4f, 0x66, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x2b, 0x0a, 0x11, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x22, 0x8f, 0x03,
	0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x40, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x40,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63,
	0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x22,
	0x82, 0x04, 0x0a, 0x0b, 0x55, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x12,
	0x46, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x55, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x65, 0x61, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6d, 0x65, 0x61, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12, 0x1b,
	0x0a, 0x09, 0x67, 0x65, 0x6f, 0x6d, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x6d, 0x4d, 0x65, 0x61, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x67,
	0x65, 0x6f, 0x6d, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x65, 0x6f, 0x6d, 0x4d, 0x65, 0x61, 0x6e,
	0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x75, 0x6c, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x73, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x64,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x65, 0x6f,
	0x6d, 0x5f, 0x73, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x67, 0x65, 0x6f, 0x6d,
	0x53, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x65, 0x6f, 0x6d, 0x5f, 0x73, 0x64, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x65, 0x6f,
	0x6d, 0x53, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x46, 0x6f, 0x72,
	0x6d, 0x75, 0x6c, 0x61, 0x22, 0xf8, 0x01, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x0f, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x40, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x22,
	0x89, 0x03, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0f, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x40, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x38, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x05, 0x40, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x12, 0x41, 0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66,
	0x52, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2a, 0xa7, 0x01, 0x0a, 0x0e,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x19, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x43, 0x4f, 0x4e, 0x4f, 0x4d,
	0x49, 0x43, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12,
	0x15, 0x0a, 0x11, 0x43, 0x41, 0x55, 0x53, 0x41, 0x4c, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x5f, 0x44, 0x45,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x05, 0x2a, 0x97, 0x01, 0x0a, 0x0f, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x4e, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x49, 0x4d,
	0x50, 0x4c, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x01, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11,
	0x55, 0x50, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49,
	0x53, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x4f, 0x4e, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x52,
	0x4c, 0x4f, 0x5f, 0x53, 0x49, 0x4d, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x2a,
	0x62, 0x0a, 0x10, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44,
	0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x43, 0x4f, 0x4e, 0x4f, 0x4d, 0x49,
	0x43, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11,
	0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54,
	0x59, 0x10, 0x02, 0x2a, 0x5a, 0x0a, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x13, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x46, 0x4c, 0x4f,
	0x57, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4c, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x41, 0x52, 0x59, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x57, 0x41, 0x53, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x03, 0x2a,
	0xb3, 0x02, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x14, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x43, 0x54, 0x4f, 0x52,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x03, 0x12, 0x0d,
	0x0a, 0x09, 0x44, 0x51, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x04, 0x12, 0x08, 0x0a,
	0x04, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x4c, 0x4f, 0x57, 0x5f,
	0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4d,
	0x50, 0x41, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x10, 0x07, 0x12,
	0x11, 0x0a, 0x0d, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44,
	0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09,
	0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x57, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x4f, 0x44,
	0x55, 0x43, 0x54, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x0d, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x0e, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4f, 0x43,
	0x49, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x0f, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x10, 0x12, 0x08, 0x0a, 0x04, 0x55,
	0x4e, 0x49, 0x54, 0x10, 0x11, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x10, 0x12, 0x2a, 0x66, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x4e, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x53,
	0x43, 0x4f, 0x50, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4d, 0x50,
	0x41, 0x43, 0x54, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x47,
	0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x10, 0x03, 0x2a, 0x4b, 0x0a,
	0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16,
	0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x43, 0x49, 0x5f,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x2a, 0xff, 0x01, 0x0a, 0x09, 0x52,
	0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x5f, 0x4f, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x55,
	0x4e, 0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x4f,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12,
	0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x5f, 0x4f, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x55, 0x4e, 0x49,
	0x54, 0x59, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x57, 0x5f, 0x4f, 0x50, 0x50, 0x4f,
	0x52, 0x54, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x5f,
	0x52, 0x49, 0x53, 0x4b, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x4c,
	0x4f, 0x57, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x4f, 0x57,
	0x5f, 0x52, 0x49, 0x53, 0x4b, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x45, 0x44, 0x49, 0x55,
	0x4d, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x49, 0x47, 0x48,
	0x5f, 0x52, 0x49, 0x53, 0x4b, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x45, 0x52, 0x59, 0x5f,
	0x48, 0x49, 0x47, 0x48, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x4e,
	0x4f, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x54, 0x5f,
	0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0c, 0x2a, 0x9c, 0x01, 0x0a,
	0x0f, 0x55, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x55, 0x4e,
	0x43, 0x45, 0x52, 0x54, 0x41, 0x49, 0x4e, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00,
	0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x4f, 0x47, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x44,
	0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x17, 0x0a,
	0x13, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x52, 0x49, 0x41, 0x4e, 0x47,
	0x4c, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x03, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x49, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x44, 0x49, 0x53,
	0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x42, 0x31, 0x0a, 0x11, 0x6f,
	0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6c, 0x63, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x05, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x0a, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x6c, 0x63, 0x61, 0xaa, 0x02, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4c, 0x43, 0x41, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_olca_proto_rawDescOnce sync.Once
	file_olca_proto_rawDescData = file_olca_proto_rawDesc
)

func file_olca_proto_rawDescGZIP() []byte {
	file_olca_proto_rawDescOnce.Do(func() {
		file_olca_proto_rawDescData = protoimpl.X.CompressGZIP(file_olca_proto_rawDescData)
	})
	return file_olca_proto_rawDescData
}

var file_olca_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_olca_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_olca_proto_goTypes = []interface{}{
	(AllocationType)(0),          // 0: protolca.AllocationType
	(CalculationType)(0),         // 1: protolca.CalculationType
	(FlowPropertyType)(0),        // 2: protolca.FlowPropertyType
	(FlowType)(0),                // 3: protolca.FlowType
	(ModelType)(0),               // 4: protolca.ModelType
	(ParameterScope)(0),          // 5: protolca.ParameterScope
	(ProcessType)(0),             // 6: protolca.ProcessType
	(RiskLevel)(0),               // 7: protolca.RiskLevel
	(UncertaintyType)(0),         // 8: protolca.UncertaintyType
	(*Actor)(nil),                // 9: protolca.Actor
	(*AllocationFactor)(nil),     // 10: protolca.AllocationFactor
	(*CalculationSetup)(nil),     // 11: protolca.CalculationSetup
	(*Category)(nil),             // 12: protolca.Category
	(*Currency)(nil),             // 13: protolca.Currency
	(*DQIndicator)(nil),          // 14: protolca.DQIndicator
	(*DQScore)(nil),              // 15: protolca.DQScore
	(*DQSystem)(nil),             // 16: protolca.DQSystem
	(*Exchange)(nil),             // 17: protolca.Exchange
	(*ExchangeRef)(nil),          // 18: protolca.ExchangeRef
	(*Flow)(nil),                 // 19: protolca.Flow
	(*FlowMap)(nil),              // 20: protolca.FlowMap
	(*FlowMapEntry)(nil),         // 21: protolca.FlowMapEntry
	(*FlowMapRef)(nil),           // 22: protolca.FlowMapRef
	(*FlowProperty)(nil),         // 23: protolca.FlowProperty
	(*FlowPropertyFactor)(nil),   // 24: protolca.FlowPropertyFactor
	(*FlowResult)(nil),           // 25: protolca.FlowResult
	(*ImpactCategory)(nil),       // 26: protolca.ImpactCategory
	(*ImpactFactor)(nil),         // 27: protolca.ImpactFactor
	(*ImpactMethod)(nil),         // 28: protolca.ImpactMethod
	(*ImpactResult)(nil),         // 29: protolca.ImpactResult
	(*Location)(nil),             // 30: protolca.Location
	(*NwFactor)(nil),             // 31: protolca.NwFactor
	(*NwSet)(nil),                // 32: protolca.NwSet
	(*Parameter)(nil),            // 33: protolca.Parameter
	(*ParameterRedef)(nil),       // 34: protolca.ParameterRedef
	(*ParameterRedefSet)(nil),    // 35: protolca.ParameterRedefSet
	(*Process)(nil),              // 36: protolca.Process
	(*ProcessDocumentation)(nil), // 37: protolca.ProcessDocumentation
	(*ProcessLink)(nil),          // 38: protolca.ProcessLink
	(*ProductSystem)(nil),        // 39: protolca.ProductSystem
	(*Project)(nil),              // 40: protolca.Project
	(*Ref)(nil),                  // 41: protolca.Ref
	(*SimpleResult)(nil),         // 42: protolca.SimpleResult
	(*SocialAspect)(nil),         // 43: protolca.SocialAspect
	(*SocialIndicator)(nil),      // 44: protolca.SocialIndicator
	(*Source)(nil),               // 45: protolca.Source
	(*Uncertainty)(nil),          // 46: protolca.Uncertainty
	(*Unit)(nil),                 // 47: protolca.Unit
	(*UnitGroup)(nil),            // 48: protolca.UnitGroup
	(EntityType)(0),              // 49: protolca.commons.EntityType
}
var file_olca_proto_depIdxs = []int32{
	49,  // 0: protolca.Actor.entity_type:type_name -> protolca.commons.EntityType
	41,  // 1: protolca.Actor.category:type_name -> protolca.Ref
	0,   // 2: protolca.AllocationFactor.allocation_type:type_name -> protolca.AllocationType
	41,  // 3: protolca.AllocationFactor.product:type_name -> protolca.Ref
	18,  // 4: protolca.AllocationFactor.exchange:type_name -> protolca.ExchangeRef
	1,   // 5: protolca.CalculationSetup.calculation_type:type_name -> protolca.CalculationType
	41,  // 6: protolca.CalculationSetup.product_system:type_name -> protolca.Ref
	41,  // 7: protolca.CalculationSetup.process:type_name -> protolca.Ref
	41,  // 8: protolca.CalculationSetup.impact_method:type_name -> protolca.Ref
	41,  // 9: protolca.CalculationSetup.nw_set:type_name -> protolca.Ref
	34,  // 10: protolca.CalculationSetup.parameters:type_name -> protolca.ParameterRedef
	0,   // 11: protolca.CalculationSetup.allocation:type_name -> protolca.AllocationType
	41,  // 12: protolca.CalculationSetup.unit:type_name -> protolca.Ref
	41,  // 13: protolca.CalculationSetup.flow_property:type_name -> protolca.Ref
	49,  // 14: protolca.Category.entity_type:type_name -> protolca.commons.EntityType
	41,  // 15: protolca.Category.category:type_name -> protolca.Ref
	4,   // 16: protolca.Category.model_type:type_name -> protolca.ModelType
	49,  // 17: protolca.Currency.entity_type:type_name -> protolca.commons.EntityType
	41,  // 18: protolca.Currency.category:type_name -> protolca.Ref
	41,  // 19: protolca.Currency.reference_currency:type_name -> protolca.Ref
	15,  // 20: protolca.DQIndicator.scores:type_name -> protolca.DQScore
	49,  // 21: protolca.DQSystem.entity_type:type_name -> protolca.commons.EntityType
	41,  // 22: protolca.DQSystem.category:type_name -> protolca.Ref
	41,  // 23: protolca.DQSystem.source:type_name -> protolca.Ref
	14,  // 24: protolca.DQSystem.indicators:type_name -> protolca.DQIndicator
	41,  // 25: protolca.Exchange.currency:type_name -> protolca.Ref
	41,  // 26: protolca.Exchange.flow:type_name -> protolca.Ref
	41,  // 27: protolca.Exchange.flow_property:type_name -> protolca.Ref
	41,  // 28: protolca.Exchange.default_provider:type_name -> protolca.Ref
	41,  // 29: protolca.Exchange.unit:type_name -> protolca.Ref
	46,  // 30: protolca.Exchange.uncertainty:type_name -> protolca.Uncertainty
	49,  // 31: protolca.Flow.entity_type:type_name -> protolca.commons.EntityType
	41,  // 32: protolca.Flow.category:type_name -> protolca.Ref
	3,   // 33: protolca.Flow.flow_type:type_name -> protolca.FlowType
	24,  // 34: protolca.Flow.flow_properties:type_name -> protolca.FlowPropertyFactor
	41,  // 35: protolca.Flow.location:type_name -> protolca.Ref
	41,  // 36: protolca.FlowMap.source:type_name -> protolca.Ref
	41,  // 37: protolca.FlowMap.target:type_name -> protolca.Ref
	21,  // 38: protolca.FlowMap.mappings:type_name -> protolca.FlowMapEntry
	22,  // 39: protolca.FlowMapEntry.from:type_name -> protolca.FlowMapRef
	22,  // 40: protolca.FlowMapEntry.to:type_name -> protolca.FlowMapRef
	41,  // 41: protolca.FlowMapRef.flow:type_name -> protolca.Ref
	41,  // 42: protolca.FlowMapRef.flow_property:type_name -> protolca.Ref
	41,  // 43: protolca.FlowMapRef.unit:type_name -> protolca.Ref
	41,  // 44: protolca.FlowMapRef.provider:type_name -> protolca.Ref
	49,  // 45: protolca.FlowProperty.entity_type:type_name -> protolca.commons.EntityType
	41,  // 46: protolca.FlowProperty.category:type_name -> protolca.Ref
	2,   // 47: protolca.FlowProperty.flow_property_type:type_name -> protolca.FlowPropertyType
	41,  // 48: protolca.FlowProperty.unit_group:type_name -> protolca.Ref
	41,  // 49: protolca.FlowPropertyFactor.flow_property:type_name -> protolca.Ref
	41,  // 50: protolca.FlowResult.flow:type_name -> protolca.Ref
	41,  // 51: protolca.FlowResult.location:type_name -> protolca.Ref
	49,  // 52: protolca.ImpactCategory.entity_type:type_name -> protolca.commons.EntityType
	41,  // 53: protolca.ImpactCategory.category:type_name -> protolca.Ref
	33,  // 54: protolca.ImpactCategory.parameters:type_name -> protolca.Parameter
	27,  // 55: protolca.ImpactCategory.impact_factors:type_name -> protolca.ImpactFactor
	41,  // 56: protolca.ImpactFactor.flow:type_name -> protolca.Ref
	41,  // 57: protolca.ImpactFactor.location:type_name -> protolca.Ref
	41,  // 58: protolca.ImpactFactor.flow_property:type_name -> protolca.Ref
	41,  // 59: protolca.ImpactFactor.unit:type_name -> protolca.Ref
	46,  // 60: protolca.ImpactFactor.uncertainty:type_name -> protolca.Uncertainty
	49,  // 61: protolca.ImpactMethod.entity_type:type_name -> protolca.commons.EntityType
	41,  // 62: protolca.ImpactMethod.category:type_name -> protolca.Ref
	41,  // 63: protolca.ImpactMethod.impact_categories:type_name -> protolca.Ref
	32,  // 64: protolca.ImpactMethod.nw_sets:type_name -> protolca.NwSet
	41,  // 65: protolca.ImpactResult.impact_category:type_name -> protolca.Ref
	49,  // 66: protolca.Location.entity_type:type_name -> protolca.commons.EntityType
	41,  // 67: protolca.Location.category:type_name -> protolca.Ref
	41,  // 68: protolca.NwFactor.impact_category:type_name -> protolca.Ref
	31,  // 69: protolca.NwSet.factors:type_name -> protolca.NwFactor
	49,  // 70: protolca.Parameter.entity_type:type_name -> protolca.commons.EntityType
	41,  // 71: protolca.Parameter.category:type_name -> protolca.Ref
	5,   // 72: protolca.Parameter.parameter_scope:type_name -> protolca.ParameterScope
	46,  // 73: protolca.Parameter.uncertainty:type_name -> protolca.Uncertainty
	41,  // 74: protolca.ParameterRedef.context:type_name -> protolca.Ref
	46,  // 75: protolca.ParameterRedef.uncertainty:type_name -> protolca.Uncertainty
	34,  // 76: protolca.ParameterRedefSet.parameters:type_name -> protolca.ParameterRedef
	49,  // 77: protolca.Process.entity_type:type_name -> protolca.commons.EntityType
	41,  // 78: protolca.Process.category:type_name -> protolca.Ref
	10,  // 79: protolca.Process.allocation_factors:type_name -> protolca.AllocationFactor
	0,   // 80: protolca.Process.default_allocation_method:type_name -> protolca.AllocationType
	17,  // 81: protolca.Process.exchanges:type_name -> protolca.Exchange
	41,  // 82: protolca.Process.location:type_name -> protolca.Ref
	33,  // 83: protolca.Process.parameters:type_name -> protolca.Parameter
	37,  // 84: protolca.Process.process_documentation:type_name -> protolca.ProcessDocumentation
	6,   // 85: protolca.Process.process_type:type_name -> protolca.ProcessType
	41,  // 86: protolca.Process.dq_system:type_name -> protolca.Ref
	41,  // 87: protolca.Process.exchange_dq_system:type_name -> protolca.Ref
	41,  // 88: protolca.Process.social_dq_system:type_name -> protolca.Ref
	43,  // 89: protolca.Process.social_aspects:type_name -> protolca.SocialAspect
	41,  // 90: protolca.ProcessDocumentation.reviewer:type_name -> protolca.Ref
	41,  // 91: protolca.ProcessDocumentation.sources:type_name -> protolca.Ref
	41,  // 92: protolca.ProcessDocumentation.data_documentor:type_name -> protolca.Ref
	41,  // 93: protolca.ProcessDocumentation.data_generator:type_name -> protolca.Ref
	41,  // 94: protolca.ProcessDocumentation.data_set_owner:type_name -> protolca.Ref
	41,  // 95: protolca.ProcessDocumentation.publication:type_name -> protolca.Ref
	41,  // 96: protolca.ProcessLink.provider:type_name -> protolca.Ref
	41,  // 97: protolca.ProcessLink.flow:type_name -> protolca.Ref
	41,  // 98: protolca.ProcessLink.process:type_name -> protolca.Ref
	18,  // 99: protolca.ProcessLink.exchange:type_name -> protolca.ExchangeRef
	49,  // 100: protolca.ProductSystem.entity_type:type_name -> protolca.commons.EntityType
	41,  // 101: protolca.ProductSystem.category:type_name -> protolca.Ref
	41,  // 102: protolca.ProductSystem.processes:type_name -> protolca.Ref
	41,  // 103: protolca.ProductSystem.reference_process:type_name -> protolca.Ref
	18,  // 104: protolca.ProductSystem.reference_exchange:type_name -> protolca.ExchangeRef
	41,  // 105: protolca.ProductSystem.target_unit:type_name -> protolca.Ref
	41,  // 106: protolca.ProductSystem.target_flow_property:type_name -> protolca.Ref
	38,  // 107: protolca.ProductSystem.process_links:type_name -> protolca.ProcessLink
	35,  // 108: protolca.ProductSystem.parameter_sets:type_name -> protolca.ParameterRedefSet
	49,  // 109: protolca.Project.entity_type:type_name -> protolca.commons.EntityType
	41,  // 110: protolca.Project.category:type_name -> protolca.Ref
	41,  // 111: protolca.Project.impact_method:type_name -> protolca.Ref
	32,  // 112: protolca.Project.nw_set:type_name -> protolca.NwSet
	49,  // 113: protolca.Ref.entity_type:type_name -> protolca.commons.EntityType
	3,   // 114: protolca.Ref.flow_type:type_name -> protolca.FlowType
	6,   // 115: protolca.Ref.process_type:type_name -> protolca.ProcessType
	25,  // 116: protolca.SimpleResult.flow_results:type_name -> protolca.FlowResult
	29,  // 117: protolca.SimpleResult.impact_results:type_name -> protolca.ImpactResult
	7,   // 118: protolca.SocialAspect.risk_level:type_name -> protolca.RiskLevel
	41,  // 119: protolca.SocialAspect.social_indicator:type_name -> protolca.Ref
	41,  // 120: protolca.SocialAspect.source:type_name -> protolca.Ref
	49,  // 121: protolca.SocialIndicator.entity_type:type_name -> protolca.commons.EntityType
	41,  // 122: protolca.SocialIndicator.category:type_name -> protolca.Ref
	41,  // 123: protolca.SocialIndicator.activity_quantity:type_name -> protolca.Ref
	41,  // 124: protolca.SocialIndicator.activity_unit:type_name -> protolca.Ref
	49,  // 125: protolca.Source.entity_type:type_name -> protolca.commons.EntityType
	41,  // 126: protolca.Source.category:type_name -> protolca.Ref
	8,   // 127: protolca.Uncertainty.distribution_type:type_name -> protolca.UncertaintyType
	49,  // 128: protolca.UnitGroup.entity_type:type_name -> protolca.commons.EntityType
	41,  // 129: protolca.UnitGroup.category:type_name -> protolca.Ref
	41,  // 130: protolca.UnitGroup.default_flow_property:type_name -> protolca.Ref
	47,  // 131: protolca.UnitGroup.units:type_name -> protolca.Unit
	132, // [132:132] is the sub-list for method output_type
	132, // [132:132] is the sub-list for method input_type
	132, // [132:132] is the sub-list for extension type_name
	132, // [132:132] is the sub-list for extension extendee
	0,   // [0:132] is the sub-list for field type_name
}

func init() { file_olca_proto_init() }
func file_olca_proto_init() {
	if File_olca_proto != nil {
		return
	}
	file_entity_type_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_olca_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Actor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocationFactor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculationSetup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Category); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Currency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DQIndicator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DQScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DQSystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Exchange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowMapEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowMapRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowPropertyFactor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImpactCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImpactFactor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImpactMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImpactResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NwFactor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NwSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Parameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterRedef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterRedefSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Process); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessDocumentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductSystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Project); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ref); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocialAspect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocialIndicator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uncertainty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Unit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_olca_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnitGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_olca_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_olca_proto_goTypes,
		DependencyIndexes: file_olca_proto_depIdxs,
		EnumInfos:         file_olca_proto_enumTypes,
		MessageInfos:      file_olca_proto_msgTypes,
	}.Build()
	File_olca_proto = out.File
	file_olca_proto_rawDesc = nil
	file_olca_proto_goTypes = nil
	file_olca_proto_depIdxs = nil
}

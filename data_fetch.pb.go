// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: data_fetch.proto

package protolca

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelType ModelType `protobuf:"varint,1,opt,name=model_type,json=modelType,proto3,enum=protolca.ModelType" json:"model_type,omitempty"`
	Id        string    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_fetch_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_fetch_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_data_fetch_proto_rawDescGZIP(), []int{0}
}

func (x *GetRequest) GetModelType() ModelType {
	if x != nil {
		return x.ModelType
	}
	return ModelType_UNDEFINED_MODEL_TYPE
}

func (x *GetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type FindRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelType ModelType `protobuf:"varint,1,opt,name=model_type,json=modelType,proto3,enum=protolca.ModelType" json:"model_type,omitempty"`
	// Types that are assignable to By:
	//	*FindRequest_Id
	//	*FindRequest_Name
	By isFindRequest_By `protobuf_oneof:"by"`
}

func (x *FindRequest) Reset() {
	*x = FindRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_fetch_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindRequest) ProtoMessage() {}

func (x *FindRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_fetch_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindRequest.ProtoReflect.Descriptor instead.
func (*FindRequest) Descriptor() ([]byte, []int) {
	return file_data_fetch_proto_rawDescGZIP(), []int{1}
}

func (x *FindRequest) GetModelType() ModelType {
	if x != nil {
		return x.ModelType
	}
	return ModelType_UNDEFINED_MODEL_TYPE
}

func (m *FindRequest) GetBy() isFindRequest_By {
	if m != nil {
		return m.By
	}
	return nil
}

func (x *FindRequest) GetId() string {
	if x, ok := x.GetBy().(*FindRequest_Id); ok {
		return x.Id
	}
	return ""
}

func (x *FindRequest) GetName() string {
	if x, ok := x.GetBy().(*FindRequest_Name); ok {
		return x.Name
	}
	return ""
}

type isFindRequest_By interface {
	isFindRequest_By()
}

type FindRequest_Id struct {
	Id string `protobuf:"bytes,2,opt,name=id,proto3,oneof"`
}

type FindRequest_Name struct {
	Name string `protobuf:"bytes,3,opt,name=name,proto3,oneof"`
}

func (*FindRequest_Id) isFindRequest_By() {}

func (*FindRequest_Name) isFindRequest_By() {}

// The request message for getting all data sets of a given type from the
// database. As there can be thousands of data set of that type in the database
// the response is paged by default. Unless specified otherwise, the first page
// with the first 100 data sets is returned by default.
type GetAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the requested data sets.
	ModelType ModelType `protobuf:"varint,1,opt,name=model_type,json=modelType,proto3,enum=protolca.ModelType" json:"model_type,omitempty"`
	// The number of data sets that should be returned per response page (defaults
	// to 100)
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Paging is optional and all data sets of the requested type are returned
	// when the `skip_paging` property is set to true.
	//
	// Types that are assignable to Paging:
	//	*GetAllRequest_Page
	//	*GetAllRequest_SkipPaging
	Paging isGetAllRequest_Paging `protobuf_oneof:"paging"`
}

func (x *GetAllRequest) Reset() {
	*x = GetAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_fetch_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllRequest) ProtoMessage() {}

func (x *GetAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_fetch_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllRequest.ProtoReflect.Descriptor instead.
func (*GetAllRequest) Descriptor() ([]byte, []int) {
	return file_data_fetch_proto_rawDescGZIP(), []int{2}
}

func (x *GetAllRequest) GetModelType() ModelType {
	if x != nil {
		return x.ModelType
	}
	return ModelType_UNDEFINED_MODEL_TYPE
}

func (x *GetAllRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (m *GetAllRequest) GetPaging() isGetAllRequest_Paging {
	if m != nil {
		return m.Paging
	}
	return nil
}

func (x *GetAllRequest) GetPage() int32 {
	if x, ok := x.GetPaging().(*GetAllRequest_Page); ok {
		return x.Page
	}
	return 0
}

func (x *GetAllRequest) GetSkipPaging() bool {
	if x, ok := x.GetPaging().(*GetAllRequest_SkipPaging); ok {
		return x.SkipPaging
	}
	return false
}

type isGetAllRequest_Paging interface {
	isGetAllRequest_Paging()
}

type GetAllRequest_Page struct {
	// The requested page of the data set (defaults to 1).
	Page int32 `protobuf:"varint,3,opt,name=page,proto3,oneof"`
}

type GetAllRequest_SkipPaging struct {
	// If set to true, all data sets of the given type will be returned in a
	// single response.
	SkipPaging bool `protobuf:"varint,4,opt,name=skip_paging,json=skipPaging,proto3,oneof"`
}

func (*GetAllRequest_Page) isGetAllRequest_Paging() {}

func (*GetAllRequest_SkipPaging) isGetAllRequest_Paging() {}

type GetAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelType  ModelType  `protobuf:"varint,1,opt,name=model_type,json=modelType,proto3,enum=protolca.ModelType" json:"model_type,omitempty"`
	TotalCount int32      `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	PageSize   int32      `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Page       int32      `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	DataSet    []*DataSet `protobuf:"bytes,5,rep,name=data_set,json=dataSet,proto3" json:"data_set,omitempty"`
}

func (x *GetAllResponse) Reset() {
	*x = GetAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_fetch_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllResponse) ProtoMessage() {}

func (x *GetAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_fetch_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllResponse.ProtoReflect.Descriptor instead.
func (*GetAllResponse) Descriptor() ([]byte, []int) {
	return file_data_fetch_proto_rawDescGZIP(), []int{3}
}

func (x *GetAllResponse) GetModelType() ModelType {
	if x != nil {
		return x.ModelType
	}
	return ModelType_UNDEFINED_MODEL_TYPE
}

func (x *GetAllResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetAllResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetAllResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetAllResponse) GetDataSet() []*DataSet {
	if x != nil {
		return x.DataSet
	}
	return nil
}

type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The model type of the searched entities.
	ModelType ModelType `protobuf:"varint,1,opt,name=model_type,json=modelType,proto3,enum=protolca.ModelType" json:"model_type,omitempty"`
	// The search query.
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_fetch_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_fetch_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_data_fetch_proto_rawDescGZIP(), []int{4}
}

func (x *SearchRequest) GetModelType() ModelType {
	if x != nil {
		return x.ModelType
	}
	return ModelType_UNDEFINED_MODEL_TYPE
}

func (x *SearchRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type GetDescriptorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The model type of the requested descriptor(s).
	ModelType ModelType `protobuf:"varint,1,opt,name=model_type,json=modelType,proto3,enum=protolca.ModelType" json:"model_type,omitempty"`
	// Types that are assignable to By:
	//	*GetDescriptorsRequest_Id
	//	*GetDescriptorsRequest_Attributes_
	By isGetDescriptorsRequest_By `protobuf_oneof:"by"`
}

func (x *GetDescriptorsRequest) Reset() {
	*x = GetDescriptorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_fetch_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDescriptorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDescriptorsRequest) ProtoMessage() {}

func (x *GetDescriptorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_fetch_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDescriptorsRequest.ProtoReflect.Descriptor instead.
func (*GetDescriptorsRequest) Descriptor() ([]byte, []int) {
	return file_data_fetch_proto_rawDescGZIP(), []int{5}
}

func (x *GetDescriptorsRequest) GetModelType() ModelType {
	if x != nil {
		return x.ModelType
	}
	return ModelType_UNDEFINED_MODEL_TYPE
}

func (m *GetDescriptorsRequest) GetBy() isGetDescriptorsRequest_By {
	if m != nil {
		return m.By
	}
	return nil
}

func (x *GetDescriptorsRequest) GetId() string {
	if x, ok := x.GetBy().(*GetDescriptorsRequest_Id); ok {
		return x.Id
	}
	return ""
}

func (x *GetDescriptorsRequest) GetAttributes() *GetDescriptorsRequest_Attributes {
	if x, ok := x.GetBy().(*GetDescriptorsRequest_Attributes_); ok {
		return x.Attributes
	}
	return nil
}

type isGetDescriptorsRequest_By interface {
	isGetDescriptorsRequest_By()
}

type GetDescriptorsRequest_Id struct {
	// The ID of the requested descriptor. Setting this field means that you
	// typically want one specific descriptor.
	Id string `protobuf:"bytes,2,opt,name=id,proto3,oneof"`
}

type GetDescriptorsRequest_Attributes_ struct {
	Attributes *GetDescriptorsRequest_Attributes `protobuf:"bytes,3,opt,name=attributes,proto3,oneof"`
}

func (*GetDescriptorsRequest_Id) isGetDescriptorsRequest_By() {}

func (*GetDescriptorsRequest_Attributes_) isGetDescriptorsRequest_By() {}

type GetCategoryContentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelType ModelType `protobuf:"varint,1,opt,name=model_type,json=modelType,proto3,enum=protolca.ModelType" json:"model_type,omitempty"`
	Category  string    `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *GetCategoryContentRequest) Reset() {
	*x = GetCategoryContentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_fetch_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoryContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoryContentRequest) ProtoMessage() {}

func (x *GetCategoryContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_fetch_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoryContentRequest.ProtoReflect.Descriptor instead.
func (*GetCategoryContentRequest) Descriptor() ([]byte, []int) {
	return file_data_fetch_proto_rawDescGZIP(), []int{6}
}

func (x *GetCategoryContentRequest) GetModelType() ModelType {
	if x != nil {
		return x.ModelType
	}
	return ModelType_UNDEFINED_MODEL_TYPE
}

func (x *GetCategoryContentRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

type GetCategoryTreeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelType ModelType `protobuf:"varint,1,opt,name=model_type,json=modelType,proto3,enum=protolca.ModelType" json:"model_type,omitempty"`
}

func (x *GetCategoryTreeRequest) Reset() {
	*x = GetCategoryTreeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_fetch_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoryTreeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoryTreeRequest) ProtoMessage() {}

func (x *GetCategoryTreeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_fetch_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoryTreeRequest.ProtoReflect.Descriptor instead.
func (*GetCategoryTreeRequest) Descriptor() ([]byte, []int) {
	return file_data_fetch_proto_rawDescGZIP(), []int{7}
}

func (x *GetCategoryTreeRequest) GetModelType() ModelType {
	if x != nil {
		return x.ModelType
	}
	return ModelType_UNDEFINED_MODEL_TYPE
}

type CategoryTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelType ModelType       `protobuf:"varint,1,opt,name=model_type,json=modelType,proto3,enum=protolca.ModelType" json:"model_type,omitempty"`
	Id        string          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name      string          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	SubTree   []*CategoryTree `protobuf:"bytes,4,rep,name=sub_tree,json=subTree,proto3" json:"sub_tree,omitempty"`
}

func (x *CategoryTree) Reset() {
	*x = CategoryTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_fetch_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryTree) ProtoMessage() {}

func (x *CategoryTree) ProtoReflect() protoreflect.Message {
	mi := &file_data_fetch_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryTree.ProtoReflect.Descriptor instead.
func (*CategoryTree) Descriptor() ([]byte, []int) {
	return file_data_fetch_proto_rawDescGZIP(), []int{8}
}

func (x *CategoryTree) GetModelType() ModelType {
	if x != nil {
		return x.ModelType
	}
	return ModelType_UNDEFINED_MODEL_TYPE
}

func (x *CategoryTree) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CategoryTree) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CategoryTree) GetSubTree() []*CategoryTree {
	if x != nil {
		return x.SubTree
	}
	return nil
}

type GetDescriptorsRequest_Attributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the requested descriptor(s).
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The ID or full path of the category. The string "/" identifies the root
	// or none-category which means that this will filter for descriptors that
	// do not have a specific category set.
	Category string `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *GetDescriptorsRequest_Attributes) Reset() {
	*x = GetDescriptorsRequest_Attributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_fetch_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDescriptorsRequest_Attributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDescriptorsRequest_Attributes) ProtoMessage() {}

func (x *GetDescriptorsRequest_Attributes) ProtoReflect() protoreflect.Message {
	mi := &file_data_fetch_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDescriptorsRequest_Attributes.ProtoReflect.Descriptor instead.
func (*GetDescriptorsRequest_Attributes) Descriptor() ([]byte, []int) {
	return file_data_fetch_proto_rawDescGZIP(), []int{5, 0}
}

func (x *GetDescriptorsRequest_Attributes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetDescriptorsRequest_Attributes) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

var File_data_fetch_proto protoreflect.FileDescriptor

var file_data_fetch_proto_rawDesc = []byte{
	0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x0a, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x50, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x6f, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x32, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x04, 0x0a,
	0x02, 0x62, 0x79, 0x22, 0xa3, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0b,
	0x73, 0x6b, 0x69, 0x70, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x42,
	0x08, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x22, 0xcd, 0x01, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0a,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74,
	0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x22, 0x59, 0x0a, 0x0d, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x22, 0xf8, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x6c, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x3c, 0x0a, 0x0a, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x04, 0x0a, 0x02, 0x62, 0x79, 0x22,
	0x6b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0a,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x4c, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x65, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x0c, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x65, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x54, 0x72, 0x65, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x72, 0x65, 0x65, 0x32,
	0xd8, 0x04, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x46, 0x69, 0x6e, 0x64, 0x12, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x12, 0x4d, 0x0a, 0x06, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63,
	0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x28, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61,
	0x2e, 0x52, 0x65, 0x66, 0x30, 0x01, 0x12, 0x3b, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65,
	0x66, 0x30, 0x01, 0x12, 0x53, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c,
	0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x30, 0x01, 0x12, 0x5d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x65, 0x65, 0x12, 0x29, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x65, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63,
	0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x54, 0x72, 0x65, 0x65, 0x12, 0x31, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x30, 0x01, 0x42, 0x4a, 0x0a, 0x16, 0x6f, 0x72,
	0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6c, 0x63, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x42, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x65, 0x74, 0x63, 0x68, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x0a, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c,
	0x63, 0x61, 0xaa, 0x02, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4c, 0x43, 0x41, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_data_fetch_proto_rawDescOnce sync.Once
	file_data_fetch_proto_rawDescData = file_data_fetch_proto_rawDesc
)

func file_data_fetch_proto_rawDescGZIP() []byte {
	file_data_fetch_proto_rawDescOnce.Do(func() {
		file_data_fetch_proto_rawDescData = protoimpl.X.CompressGZIP(file_data_fetch_proto_rawDescData)
	})
	return file_data_fetch_proto_rawDescData
}

var file_data_fetch_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_data_fetch_proto_goTypes = []interface{}{
	(*GetRequest)(nil),                       // 0: protolca.services.GetRequest
	(*FindRequest)(nil),                      // 1: protolca.services.FindRequest
	(*GetAllRequest)(nil),                    // 2: protolca.services.GetAllRequest
	(*GetAllResponse)(nil),                   // 3: protolca.services.GetAllResponse
	(*SearchRequest)(nil),                    // 4: protolca.services.SearchRequest
	(*GetDescriptorsRequest)(nil),            // 5: protolca.services.GetDescriptorsRequest
	(*GetCategoryContentRequest)(nil),        // 6: protolca.services.GetCategoryContentRequest
	(*GetCategoryTreeRequest)(nil),           // 7: protolca.services.GetCategoryTreeRequest
	(*CategoryTree)(nil),                     // 8: protolca.services.CategoryTree
	(*GetDescriptorsRequest_Attributes)(nil), // 9: protolca.services.GetDescriptorsRequest.Attributes
	(ModelType)(0),                           // 10: protolca.ModelType
	(*DataSet)(nil),                          // 11: protolca.services.DataSet
	(*Ref)(nil),                              // 12: protolca.Ref
}
var file_data_fetch_proto_depIdxs = []int32{
	10, // 0: protolca.services.GetRequest.model_type:type_name -> protolca.ModelType
	10, // 1: protolca.services.FindRequest.model_type:type_name -> protolca.ModelType
	10, // 2: protolca.services.GetAllRequest.model_type:type_name -> protolca.ModelType
	10, // 3: protolca.services.GetAllResponse.model_type:type_name -> protolca.ModelType
	11, // 4: protolca.services.GetAllResponse.data_set:type_name -> protolca.services.DataSet
	10, // 5: protolca.services.SearchRequest.model_type:type_name -> protolca.ModelType
	10, // 6: protolca.services.GetDescriptorsRequest.model_type:type_name -> protolca.ModelType
	9,  // 7: protolca.services.GetDescriptorsRequest.attributes:type_name -> protolca.services.GetDescriptorsRequest.Attributes
	10, // 8: protolca.services.GetCategoryContentRequest.model_type:type_name -> protolca.ModelType
	10, // 9: protolca.services.GetCategoryTreeRequest.model_type:type_name -> protolca.ModelType
	10, // 10: protolca.services.CategoryTree.model_type:type_name -> protolca.ModelType
	8,  // 11: protolca.services.CategoryTree.sub_tree:type_name -> protolca.services.CategoryTree
	0,  // 12: protolca.services.DataFetchService.Get:input_type -> protolca.services.GetRequest
	1,  // 13: protolca.services.DataFetchService.Find:input_type -> protolca.services.FindRequest
	2,  // 14: protolca.services.DataFetchService.GetAll:input_type -> protolca.services.GetAllRequest
	5,  // 15: protolca.services.DataFetchService.GetDescriptors:input_type -> protolca.services.GetDescriptorsRequest
	4,  // 16: protolca.services.DataFetchService.Search:input_type -> protolca.services.SearchRequest
	6,  // 17: protolca.services.DataFetchService.GetCategoryContent:input_type -> protolca.services.GetCategoryContentRequest
	7,  // 18: protolca.services.DataFetchService.GetCategoryTree:input_type -> protolca.services.GetCategoryTreeRequest
	12, // 19: protolca.services.DataFetchService.GetProvidersFor:input_type -> protolca.Ref
	11, // 20: protolca.services.DataFetchService.Get:output_type -> protolca.services.DataSet
	11, // 21: protolca.services.DataFetchService.Find:output_type -> protolca.services.DataSet
	3,  // 22: protolca.services.DataFetchService.GetAll:output_type -> protolca.services.GetAllResponse
	12, // 23: protolca.services.DataFetchService.GetDescriptors:output_type -> protolca.Ref
	12, // 24: protolca.services.DataFetchService.Search:output_type -> protolca.Ref
	12, // 25: protolca.services.DataFetchService.GetCategoryContent:output_type -> protolca.Ref
	8,  // 26: protolca.services.DataFetchService.GetCategoryTree:output_type -> protolca.services.CategoryTree
	12, // 27: protolca.services.DataFetchService.GetProvidersFor:output_type -> protolca.Ref
	20, // [20:28] is the sub-list for method output_type
	12, // [12:20] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_data_fetch_proto_init() }
func file_data_fetch_proto_init() {
	if File_data_fetch_proto != nil {
		return
	}
	file_olca_proto_init()
	file_commons_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_data_fetch_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_fetch_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_fetch_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_fetch_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_fetch_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_fetch_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDescriptorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_fetch_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCategoryContentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_fetch_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCategoryTreeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_fetch_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_fetch_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDescriptorsRequest_Attributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_data_fetch_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*FindRequest_Id)(nil),
		(*FindRequest_Name)(nil),
	}
	file_data_fetch_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*GetAllRequest_Page)(nil),
		(*GetAllRequest_SkipPaging)(nil),
	}
	file_data_fetch_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*GetDescriptorsRequest_Id)(nil),
		(*GetDescriptorsRequest_Attributes_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_data_fetch_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_data_fetch_proto_goTypes,
		DependencyIndexes: file_data_fetch_proto_depIdxs,
		MessageInfos:      file_data_fetch_proto_msgTypes,
	}.Build()
	File_data_fetch_proto = out.File
	file_data_fetch_proto_rawDesc = nil
	file_data_fetch_proto_goTypes = nil
	file_data_fetch_proto_depIdxs = nil
}

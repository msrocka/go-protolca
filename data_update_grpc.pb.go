// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protolca

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataUpdateServiceClient is the client API for DataUpdateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataUpdateServiceClient interface {
	// Inserts or updates the given data set in the database. Returns the data
	// set reference of the inserted or updated data set.
	Put(ctx context.Context, in *DataSet, opts ...grpc.CallOption) (*Ref, error)
	// Deletes the object with the ID and type of the request message from the
	// database.
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Creates a new product system.
	CreateProductSystem(ctx context.Context, in *CreateSystemRequest, opts ...grpc.CallOption) (*Ref, error)
}

type dataUpdateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataUpdateServiceClient(cc grpc.ClientConnInterface) DataUpdateServiceClient {
	return &dataUpdateServiceClient{cc}
}

func (c *dataUpdateServiceClient) Put(ctx context.Context, in *DataSet, opts ...grpc.CallOption) (*Ref, error) {
	out := new(Ref)
	err := c.cc.Invoke(ctx, "/protolca.services.DataUpdateService/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataUpdateServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protolca.services.DataUpdateService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataUpdateServiceClient) CreateProductSystem(ctx context.Context, in *CreateSystemRequest, opts ...grpc.CallOption) (*Ref, error) {
	out := new(Ref)
	err := c.cc.Invoke(ctx, "/protolca.services.DataUpdateService/CreateProductSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataUpdateServiceServer is the server API for DataUpdateService service.
// All implementations must embed UnimplementedDataUpdateServiceServer
// for forward compatibility
type DataUpdateServiceServer interface {
	// Inserts or updates the given data set in the database. Returns the data
	// set reference of the inserted or updated data set.
	Put(context.Context, *DataSet) (*Ref, error)
	// Deletes the object with the ID and type of the request message from the
	// database.
	Delete(context.Context, *DeleteRequest) (*empty.Empty, error)
	// Creates a new product system.
	CreateProductSystem(context.Context, *CreateSystemRequest) (*Ref, error)
	mustEmbedUnimplementedDataUpdateServiceServer()
}

// UnimplementedDataUpdateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataUpdateServiceServer struct {
}

func (UnimplementedDataUpdateServiceServer) Put(context.Context, *DataSet) (*Ref, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedDataUpdateServiceServer) Delete(context.Context, *DeleteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDataUpdateServiceServer) CreateProductSystem(context.Context, *CreateSystemRequest) (*Ref, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProductSystem not implemented")
}
func (UnimplementedDataUpdateServiceServer) mustEmbedUnimplementedDataUpdateServiceServer() {}

// UnsafeDataUpdateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataUpdateServiceServer will
// result in compilation errors.
type UnsafeDataUpdateServiceServer interface {
	mustEmbedUnimplementedDataUpdateServiceServer()
}

func RegisterDataUpdateServiceServer(s grpc.ServiceRegistrar, srv DataUpdateServiceServer) {
	s.RegisterService(&DataUpdateService_ServiceDesc, srv)
}

func _DataUpdateService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataUpdateServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protolca.services.DataUpdateService/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataUpdateServiceServer).Put(ctx, req.(*DataSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataUpdateService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataUpdateServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protolca.services.DataUpdateService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataUpdateServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataUpdateService_CreateProductSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataUpdateServiceServer).CreateProductSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protolca.services.DataUpdateService/CreateProductSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataUpdateServiceServer).CreateProductSystem(ctx, req.(*CreateSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataUpdateService_ServiceDesc is the grpc.ServiceDesc for DataUpdateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataUpdateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protolca.services.DataUpdateService",
	HandlerType: (*DataUpdateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _DataUpdateService_Put_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DataUpdateService_Delete_Handler,
		},
		{
			MethodName: "CreateProductSystem",
			Handler:    _DataUpdateService_CreateProductSystem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data_update.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protolca

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AboutServiceClient is the client API for AboutService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AboutServiceClient interface {
	About(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AboutResponse, error)
}

type aboutServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAboutServiceClient(cc grpc.ClientConnInterface) AboutServiceClient {
	return &aboutServiceClient{cc}
}

func (c *aboutServiceClient) About(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AboutResponse, error) {
	out := new(AboutResponse)
	err := c.cc.Invoke(ctx, "/protolca.services.AboutService/About", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AboutServiceServer is the server API for AboutService service.
// All implementations must embed UnimplementedAboutServiceServer
// for forward compatibility
type AboutServiceServer interface {
	About(context.Context, *empty.Empty) (*AboutResponse, error)
	mustEmbedUnimplementedAboutServiceServer()
}

// UnimplementedAboutServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAboutServiceServer struct {
}

func (UnimplementedAboutServiceServer) About(context.Context, *empty.Empty) (*AboutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method About not implemented")
}
func (UnimplementedAboutServiceServer) mustEmbedUnimplementedAboutServiceServer() {}

// UnsafeAboutServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AboutServiceServer will
// result in compilation errors.
type UnsafeAboutServiceServer interface {
	mustEmbedUnimplementedAboutServiceServer()
}

func RegisterAboutServiceServer(s grpc.ServiceRegistrar, srv AboutServiceServer) {
	s.RegisterService(&AboutService_ServiceDesc, srv)
}

func _AboutService_About_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AboutServiceServer).About(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protolca.services.AboutService/About",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AboutServiceServer).About(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AboutService_ServiceDesc is the grpc.ServiceDesc for AboutService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AboutService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protolca.services.AboutService",
	HandlerType: (*AboutServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "About",
			Handler:    _AboutService_About_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "about_service.proto",
}

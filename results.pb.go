// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: results.proto

package protolca

import (
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// A `Result` message is basically just a reference to a real result on the
// server side. As result data can be really large, we do not add them directly
// to the result. Instead you call the respective methods of the result service
// to get them. Because of this, you need to explicitly call `Dispose` when you
// do not need a result anymore. Otherwise you will create memory leaks as the
// result still exists on the server side.
type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,json=@id,proto3" json:"id,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_results_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_results_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_results_proto_rawDescGZIP(), []int{0}
}

func (x *Result) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ImpactFactorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    *Result   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Indicator *Ref      `protobuf:"bytes,2,opt,name=indicator,proto3" json:"indicator,omitempty"`
	Flow      *EnviFlow `protobuf:"bytes,3,opt,name=flow,proto3" json:"flow,omitempty"`
}

func (x *ImpactFactorRequest) Reset() {
	*x = ImpactFactorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_results_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImpactFactorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImpactFactorRequest) ProtoMessage() {}

func (x *ImpactFactorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_results_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImpactFactorRequest.ProtoReflect.Descriptor instead.
func (*ImpactFactorRequest) Descriptor() ([]byte, []int) {
	return file_results_proto_rawDescGZIP(), []int{1}
}

func (x *ImpactFactorRequest) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ImpactFactorRequest) GetIndicator() *Ref {
	if x != nil {
		return x.Indicator
	}
	return nil
}

func (x *ImpactFactorRequest) GetFlow() *EnviFlow {
	if x != nil {
		return x.Flow
	}
	return nil
}

type ImpactFactorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Indicator *Ref      `protobuf:"bytes,1,opt,name=indicator,proto3" json:"indicator,omitempty"`
	Flow      *EnviFlow `protobuf:"bytes,2,opt,name=flow,proto3" json:"flow,omitempty"`
	Value     float64   `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ImpactFactorResponse) Reset() {
	*x = ImpactFactorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_results_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImpactFactorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImpactFactorResponse) ProtoMessage() {}

func (x *ImpactFactorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_results_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImpactFactorResponse.ProtoReflect.Descriptor instead.
func (*ImpactFactorResponse) Descriptor() ([]byte, []int) {
	return file_results_proto_rawDescGZIP(), []int{2}
}

func (x *ImpactFactorResponse) GetIndicator() *Ref {
	if x != nil {
		return x.Indicator
	}
	return nil
}

func (x *ImpactFactorResponse) GetFlow() *EnviFlow {
	if x != nil {
		return x.Flow
	}
	return nil
}

func (x *ImpactFactorResponse) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// The request for a contribution result of a tech-flow.
type TechFlowContributionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result   *Result   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	TechFlow *TechFlow `protobuf:"bytes,2,opt,name=tech_flow,json=techFlow,proto3" json:"tech_flow,omitempty"`
	// Types that are assignable to ResultRef:
	//	*TechFlowContributionRequest_EnviFlow
	//	*TechFlowContributionRequest_Impact
	//	*TechFlowContributionRequest_Costs
	ResultRef isTechFlowContributionRequest_ResultRef `protobuf_oneof:"result_ref"`
}

func (x *TechFlowContributionRequest) Reset() {
	*x = TechFlowContributionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_results_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TechFlowContributionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TechFlowContributionRequest) ProtoMessage() {}

func (x *TechFlowContributionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_results_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TechFlowContributionRequest.ProtoReflect.Descriptor instead.
func (*TechFlowContributionRequest) Descriptor() ([]byte, []int) {
	return file_results_proto_rawDescGZIP(), []int{3}
}

func (x *TechFlowContributionRequest) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *TechFlowContributionRequest) GetTechFlow() *TechFlow {
	if x != nil {
		return x.TechFlow
	}
	return nil
}

func (m *TechFlowContributionRequest) GetResultRef() isTechFlowContributionRequest_ResultRef {
	if m != nil {
		return m.ResultRef
	}
	return nil
}

func (x *TechFlowContributionRequest) GetEnviFlow() *EnviFlow {
	if x, ok := x.GetResultRef().(*TechFlowContributionRequest_EnviFlow); ok {
		return x.EnviFlow
	}
	return nil
}

func (x *TechFlowContributionRequest) GetImpact() *Ref {
	if x, ok := x.GetResultRef().(*TechFlowContributionRequest_Impact); ok {
		return x.Impact
	}
	return nil
}

func (x *TechFlowContributionRequest) GetCosts() bool {
	if x, ok := x.GetResultRef().(*TechFlowContributionRequest_Costs); ok {
		return x.Costs
	}
	return false
}

type isTechFlowContributionRequest_ResultRef interface {
	isTechFlowContributionRequest_ResultRef()
}

type TechFlowContributionRequest_EnviFlow struct {
	EnviFlow *EnviFlow `protobuf:"bytes,3,opt,name=envi_flow,json=enviFlow,proto3,oneof"`
}

type TechFlowContributionRequest_Impact struct {
	Impact *Ref `protobuf:"bytes,4,opt,name=impact,proto3,oneof"`
}

type TechFlowContributionRequest_Costs struct {
	Costs bool `protobuf:"varint,5,opt,name=costs,proto3,oneof"`
}

func (*TechFlowContributionRequest_EnviFlow) isTechFlowContributionRequest_ResultRef() {}

func (*TechFlowContributionRequest_Impact) isTechFlowContributionRequest_ResultRef() {}

func (*TechFlowContributionRequest_Costs) isTechFlowContributionRequest_ResultRef() {}

var File_results_proto protoreflect.FileDescriptor

var file_results_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0a, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x19, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0f, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x40, 0x69, 0x64, 0x22, 0xa6, 0x01, 0x0a, 0x13, 0x49,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x04, 0x66,
	0x6c, 0x6f, 0x77, 0x22, 0x8a, 0x01, 0x0a, 0x14, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x09,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x09,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x04, 0x66, 0x6c, 0x6f,
	0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c,
	0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x76, 0x69,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x95, 0x02, 0x0a, 0x1b, 0x54, 0x65, 0x63, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63,
	0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x63, 0x68, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x08, 0x74, 0x65, 0x63, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x3a, 0x0a,
	0x09, 0x65, 0x6e, 0x76, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x46, 0x6c, 0x6f, 0x77, 0x48, 0x00, 0x52,
	0x08, 0x65, 0x6e, 0x76, 0x69, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x27, 0x0a, 0x06, 0x69, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x06, 0x69, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x12, 0x16, 0x0a, 0x05, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x32, 0xaf, 0x07, 0x0a, 0x0d, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c,
	0x63, 0x61, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x75, 0x70, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x48,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x65, 0x63, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x65,
	0x63, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x30, 0x01, 0x12, 0x48, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x45,
	0x6e, 0x76, 0x69, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x6c, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x46, 0x6c, 0x6f, 0x77,
	0x30, 0x01, 0x12, 0x41, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e,
	0x52, 0x65, 0x66, 0x30, 0x01, 0x12, 0x50, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x01, 0x12, 0x4e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x73, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x01, 0x12, 0x67, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x63, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x66, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x6c, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x63,
	0x68, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x6c, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x6b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x66, 0x4f, 0x6e, 0x65, 0x12, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x63, 0x68, 0x46, 0x6c,
	0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x65, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x3c, 0x0a, 0x07,
	0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c,
	0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x4e, 0x0a, 0x16, 0x6f, 0x72,
	0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6c, 0x63, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x42, 0x12, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x0a, 0x2e, 0x3b, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x6c, 0x63, 0x61, 0xaa, 0x02, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4c, 0x43,
	0x41, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_results_proto_rawDescOnce sync.Once
	file_results_proto_rawDescData = file_results_proto_rawDesc
)

func file_results_proto_rawDescGZIP() []byte {
	file_results_proto_rawDescOnce.Do(func() {
		file_results_proto_rawDescData = protoimpl.X.CompressGZIP(file_results_proto_rawDescData)
	})
	return file_results_proto_rawDescData
}

var file_results_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_results_proto_goTypes = []interface{}{
	(*Result)(nil),                      // 0: protolca.services.Result
	(*ImpactFactorRequest)(nil),         // 1: protolca.services.ImpactFactorRequest
	(*ImpactFactorResponse)(nil),        // 2: protolca.services.ImpactFactorResponse
	(*TechFlowContributionRequest)(nil), // 3: protolca.services.TechFlowContributionRequest
	(*Ref)(nil),                         // 4: protolca.Ref
	(*EnviFlow)(nil),                    // 5: protolca.services.EnviFlow
	(*TechFlow)(nil),                    // 6: protolca.services.TechFlow
	(*CalculationSetup)(nil),            // 7: protolca.CalculationSetup
	(*ResultValue)(nil),                 // 8: protolca.services.ResultValue
	(*empty.Empty)(nil),                 // 9: google.protobuf.Empty
}
var file_results_proto_depIdxs = []int32{
	0,  // 0: protolca.services.ImpactFactorRequest.result:type_name -> protolca.services.Result
	4,  // 1: protolca.services.ImpactFactorRequest.indicator:type_name -> protolca.Ref
	5,  // 2: protolca.services.ImpactFactorRequest.flow:type_name -> protolca.services.EnviFlow
	4,  // 3: protolca.services.ImpactFactorResponse.indicator:type_name -> protolca.Ref
	5,  // 4: protolca.services.ImpactFactorResponse.flow:type_name -> protolca.services.EnviFlow
	0,  // 5: protolca.services.TechFlowContributionRequest.result:type_name -> protolca.services.Result
	6,  // 6: protolca.services.TechFlowContributionRequest.tech_flow:type_name -> protolca.services.TechFlow
	5,  // 7: protolca.services.TechFlowContributionRequest.envi_flow:type_name -> protolca.services.EnviFlow
	4,  // 8: protolca.services.TechFlowContributionRequest.impact:type_name -> protolca.Ref
	7,  // 9: protolca.services.ResultService.Calculate:input_type -> protolca.CalculationSetup
	0,  // 10: protolca.services.ResultService.GetTechFlows:input_type -> protolca.services.Result
	0,  // 11: protolca.services.ResultService.GetEnviFlows:input_type -> protolca.services.Result
	0,  // 12: protolca.services.ResultService.GetImpactCategories:input_type -> protolca.services.Result
	0,  // 13: protolca.services.ResultService.GetTotalInventory:input_type -> protolca.services.Result
	0,  // 14: protolca.services.ResultService.GetTotalImpacts:input_type -> protolca.services.Result
	3,  // 15: protolca.services.ResultService.GetDirectContribution:input_type -> protolca.services.TechFlowContributionRequest
	3,  // 16: protolca.services.ResultService.GetTotalContribution:input_type -> protolca.services.TechFlowContributionRequest
	3,  // 17: protolca.services.ResultService.GetTotalContributionOfOne:input_type -> protolca.services.TechFlowContributionRequest
	1,  // 18: protolca.services.ResultService.GetImpactFactors:input_type -> protolca.services.ImpactFactorRequest
	0,  // 19: protolca.services.ResultService.Dispose:input_type -> protolca.services.Result
	0,  // 20: protolca.services.ResultService.Calculate:output_type -> protolca.services.Result
	6,  // 21: protolca.services.ResultService.GetTechFlows:output_type -> protolca.services.TechFlow
	5,  // 22: protolca.services.ResultService.GetEnviFlows:output_type -> protolca.services.EnviFlow
	4,  // 23: protolca.services.ResultService.GetImpactCategories:output_type -> protolca.Ref
	8,  // 24: protolca.services.ResultService.GetTotalInventory:output_type -> protolca.services.ResultValue
	8,  // 25: protolca.services.ResultService.GetTotalImpacts:output_type -> protolca.services.ResultValue
	8,  // 26: protolca.services.ResultService.GetDirectContribution:output_type -> protolca.services.ResultValue
	8,  // 27: protolca.services.ResultService.GetTotalContribution:output_type -> protolca.services.ResultValue
	8,  // 28: protolca.services.ResultService.GetTotalContributionOfOne:output_type -> protolca.services.ResultValue
	2,  // 29: protolca.services.ResultService.GetImpactFactors:output_type -> protolca.services.ImpactFactorResponse
	9,  // 30: protolca.services.ResultService.Dispose:output_type -> google.protobuf.Empty
	20, // [20:31] is the sub-list for method output_type
	9,  // [9:20] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_results_proto_init() }
func file_results_proto_init() {
	if File_results_proto != nil {
		return
	}
	file_olca_proto_init()
	file_result_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_results_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_results_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImpactFactorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_results_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImpactFactorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_results_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TechFlowContributionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_results_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*TechFlowContributionRequest_EnviFlow)(nil),
		(*TechFlowContributionRequest_Impact)(nil),
		(*TechFlowContributionRequest_Costs)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_results_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_results_proto_goTypes,
		DependencyIndexes: file_results_proto_depIdxs,
		MessageInfos:      file_results_proto_msgTypes,
	}.Build()
	File_results_proto = out.File
	file_results_proto_rawDesc = nil
	file_results_proto_goTypes = nil
	file_results_proto_depIdxs = nil
}
